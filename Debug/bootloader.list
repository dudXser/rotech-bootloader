
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080075ec  080075ec  000085ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000090dc  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  000090dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  080076bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090dc  2**0
                  CONTENTS
 10 .bss          00000f30  200000dc  200000dc  000090dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000100c  2000100c  000090dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcd7  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea8  00000000  00000000  00016de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00019c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096d  00000000  00000000  0001a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e29  00000000  00000000  0001b2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128f2  00000000  00000000  0003c0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9f94  00000000  00000000  0004e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010895c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003260  00000000  00000000  001089a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000dc 	.word	0x200000dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075d4 	.word	0x080075d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e0 	.word	0x200000e0
 80001c4:	080075d4 	.word	0x080075d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 f9b1 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f835 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f89d 	bl	8000604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin ) == GPIO_PIN_SET)
 80004ca:	2104      	movs	r1, #4
 80004cc:	4812      	ldr	r0, [pc, #72]	@ (8000518 <main+0x60>)
 80004ce:	f000 ffc5 	bl	800145c <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d11b      	bne.n	8000510 <main+0x58>
  {
	  extern void* _estack;
  	/* Test if user code is programmed starting from address 0x0800C000 */
      if (((*(uint32_t*) FLASH_APP_START_ADDESS) & 0x2FFF8000) != &_estack)
 80004d8:	4b10      	ldr	r3, [pc, #64]	@ (800051c <main+0x64>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <main+0x68>)
 80004de:	4013      	ands	r3, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <main+0x6c>)
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d013      	beq.n	8000510 <main+0x58>
      {
  	/* Jump to user application */
        JumpAddress = *(__IO uint32_t *) (FLASH_APP_START_ADDRESS + 4);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <main+0x64>)
 80004ea:	3304      	adds	r3, #4
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000528 <main+0x70>)
 80004f0:	6013      	str	r3, [r2, #0]
        JumpToApplication = (pFunction) JumpAddress;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <main+0x70>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <main+0x74>)
 80004fa:	601a      	str	r2, [r3, #0]

        	/* Initialize user application's Stack Pointer */
        __set_MSP(*(__IO uint32_t *) FLASH_APP_START_ADDRESS);
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <main+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f383 8808 	msr	MSP, r3
}
 8000508:	bf00      	nop
        JumpToApplication();
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <main+0x74>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4798      	blx	r3
      }
  }
  MX_USB_DEVICE_Init();
 8000510:	f006 fb1e 	bl	8006b50 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x5c>
 8000518:	40020400 	.word	0x40020400
 800051c:	08014000 	.word	0x08014000
 8000520:	2fff8000 	.word	0x2fff8000
 8000524:	20020000 	.word	0x20020000
 8000528:	200000fc 	.word	0x200000fc
 800052c:	200000f8 	.word	0x200000f8

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 f81c 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a0:	2319      	movs	r3, #25
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f9ac 	bl	8002914 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f88b 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fc0d 	bl	8002e04 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f874 	bl	80006dc <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a2b      	ldr	r2, [pc, #172]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a24      	ldr	r2, [pc, #144]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xcc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <MX_GPIO_Init+0xd0>)
 8000690:	f000 fefc 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000694:	2302      	movs	r3, #2
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <MX_GPIO_Init+0xd0>)
 80006ac:	f000 fd3a 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b0:	2304      	movs	r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_GPIO_Init+0xd4>)
 80006c4:	f000 fd2e 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020400 	.word	0x40020400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000734 <HAL_MspInit+0x4c>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_MspInit+0x4c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	@ 0x40
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x4>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <MemManage_Handler+0x4>

08000750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <UsageFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f89b 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <OTG_FS_IRQHandler+0x10>)
 800079e:	f001 f80d 	bl	80017bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000704 	.word	0x20000704

080007ac <SystemInit>:
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000808 <LoopFillZerobss+0xe>
 80007d4:	f7ff ffea 	bl	80007ac <SystemInit>
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopFillZerobss+0x12>)
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopFillZerobss+0x16>)
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopFillZerobss+0x1a>)
 80007de:	2300      	movs	r3, #0
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:
 80007e2:	58d4      	ldr	r4, [r2, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:
 80007e8:	18c4      	adds	r4, r0, r3
 80007ea:	428c      	cmp	r4, r1
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopFillZerobss+0x1e>)
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopFillZerobss+0x22>)
 80007f2:	2300      	movs	r3, #0
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:
 80007fa:	42a2      	cmp	r2, r4
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>
 80007fe:	f006 fec5 	bl	800758c <__libc_init_array>
 8000802:	f7ff fe59 	bl	80004b8 <main>
 8000806:	4770      	bx	lr
 8000808:	20020000 	.word	0x20020000
 800080c:	20000000 	.word	0x20000000
 8000810:	200000dc 	.word	0x200000dc
 8000814:	080076bc 	.word	0x080076bc
 8000818:	200000dc 	.word	0x200000dc
 800081c:	2000100c 	.word	0x2000100c

08000820 <ADC_IRQHandler>:
 8000820:	e7fe      	b.n	8000820 <ADC_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <HAL_Init+0x40>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <HAL_Init+0x40>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800083e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <HAL_Init+0x40>)
 8000846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800084a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f94f 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	200f      	movs	r0, #15
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff ff46 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023c00 	.word	0x40023c00

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f967 	bl	8000b5a <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 f92f 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000100 	.word	0x20000100

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000100 	.word	0x20000100

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff ffee 	bl	80008f0 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffde 	bl	80008f0 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4907      	ldr	r1, [pc, #28]	@ (80009ec <__NVIC_EnableIRQ+0x38>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff29 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff3e 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff31 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffa2 	bl	8000aac <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b86:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <HAL_FLASH_Program+0xa0>)
 8000b88:	7e1b      	ldrb	r3, [r3, #24]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <HAL_FLASH_Program+0x1e>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e03b      	b.n	8000c0a <HAL_FLASH_Program+0x96>
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <HAL_FLASH_Program+0xa0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b9c:	f000 f870 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d12b      	bne.n	8000c02 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d105      	bne.n	8000bbc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000bb0:	783b      	ldrb	r3, [r7, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	f000 f91b 	bl	8000df0 <FLASH_Program_Byte>
 8000bba:	e016      	b.n	8000bea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f000 f8ee 	bl	8000da8 <FLASH_Program_HalfWord>
 8000bcc:	e00d      	b.n	8000bea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d105      	bne.n	8000be0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f000 f8c3 	bl	8000d64 <FLASH_Program_Word>
 8000bde:	e004      	b.n	8000bea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f000 f88b 	bl	8000d00 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000bee:	f000 f847 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_FLASH_Program+0xa4>)
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_FLASH_Program+0xa4>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c02:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <HAL_FLASH_Program+0xa0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	761a      	strb	r2, [r3, #24]

  return status;
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000104 	.word	0x20000104
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_FLASH_Unlock+0x38>)
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da0b      	bge.n	8000c46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_FLASH_Unlock+0x38>)
 8000c30:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_FLASH_Unlock+0x3c>)
 8000c32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <HAL_FLASH_Unlock+0x38>)
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_FLASH_Unlock+0x40>)
 8000c38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_FLASH_Unlock+0x38>)
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	da01      	bge.n	8000c46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40023c00 	.word	0x40023c00
 8000c58:	45670123 	.word	0x45670123
 8000c5c:	cdef89ab 	.word	0xcdef89ab

08000c60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_FLASH_Lock+0x1c>)
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_FLASH_Lock+0x1c>)
 8000c6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c6e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <FLASH_WaitForLastOperation+0x78>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c92:	f7ff fe2d 	bl	80008f0 <HAL_GetTick>
 8000c96:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8000c98:	e010      	b.n	8000cbc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d00c      	beq.n	8000cbc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d007      	beq.n	8000cb8 <FLASH_WaitForLastOperation+0x38>
 8000ca8:	f7ff fe22 	bl	80008f0 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d201      	bcs.n	8000cbc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e019      	b.n	8000cf0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <FLASH_WaitForLastOperation+0x7c>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1e8      	bne.n	8000c9a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <FLASH_WaitForLastOperation+0x7c>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <FLASH_WaitForLastOperation+0x7c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <FLASH_WaitForLastOperation+0x7c>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ce6:	f000 f8a5 	bl	8000e34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0

}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000104 	.word	0x20000104
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000d22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <FLASH_Program_DoubleWord+0x60>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000d36:	f3bf 8f6f 	isb	sy
}
 8000d3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8000d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	000a      	movs	r2, r1
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	3104      	adds	r1, #4
 8000d50:	4613      	mov	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <FLASH_Program_Word+0x40>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000dbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <FLASH_Program_HalfWord+0x44>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	801a      	strh	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <FLASH_Program_Byte+0x40>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	701a      	strb	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d008      	beq.n	8000e56 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e4e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e6c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e70:	2220      	movs	r2, #32
 8000e72:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000e8a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e8e:	2240      	movs	r2, #64	@ 0x40
 8000e90:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d008      	beq.n	8000eb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000ea8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <FLASH_SetErrorCode+0xa8>)
 8000ec6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <FLASH_SetErrorCode+0xa4>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	60da      	str	r2, [r3, #12]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40023c00 	.word	0x40023c00
 8000edc:	20000104 	.word	0x20000104

08000ee0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <HAL_FLASHEx_Erase+0xd8>)
 8000ef4:	7e1b      	ldrb	r3, [r3, #24]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_FLASHEx_Erase+0x1e>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e058      	b.n	8000fb0 <HAL_FLASHEx_Erase+0xd0>
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <HAL_FLASHEx_Erase+0xd8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f08:	f7ff feba 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d148      	bne.n	8000fa8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d115      	bne.n	8000f52 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f000 f844 	bl	8000fc0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f3c:	f7ff fea0 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f44:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_FLASHEx_Erase+0xdc>)
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_FLASHEx_Erase+0xdc>)
 8000f4a:	f023 0304 	bic.w	r3, r3, #4
 8000f4e:	6113      	str	r3, [r2, #16]
 8000f50:	e028      	b.n	8000fa4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	e01c      	b.n	8000f94 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	68b8      	ldr	r0, [r7, #8]
 8000f64:	f000 f850 	bl	8001008 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f6c:	f7ff fe88 	bl	8000c80 <FLASH_WaitForLastOperation>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <HAL_FLASHEx_Erase+0xdc>)
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <HAL_FLASHEx_Erase+0xdc>)
 8000f7a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8000f7e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
          break;
 8000f8c:	e00a      	b.n	8000fa4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d3da      	bcc.n	8000f5a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000fa4:	f000 f878 	bl	8001098 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_FLASHEx_Erase+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]

  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000104 	.word	0x20000104
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <FLASH_MassErase+0x44>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001004 <FLASH_MassErase+0x44>)
 8000fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <FLASH_MassErase+0x44>)
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <FLASH_MassErase+0x44>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <FLASH_MassErase+0x44>)
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	4313      	orrs	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <FLASH_MassErase+0x44>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6113      	str	r3, [r2, #16]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e010      	b.n	8001046 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d103      	bne.n	8001032 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800102a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e009      	b.n	8001046 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d103      	bne.n	8001040 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e002      	b.n	8001046 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001040:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001044:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 800104c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	490f      	ldr	r1, [pc, #60]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001064:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001068:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4313      	orrs	r3, r2
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <FLASH_Erase_Sector+0x8c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001086:	6113      	str	r3, [r2, #16]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40023c00 	.word	0x40023c00

08001098 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <FLASH_FlushCaches+0x88>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d017      	beq.n	80010d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80010b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a16      	ldr	r2, [pc, #88]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d017      	beq.n	8001114 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <FLASH_FlushCaches+0x88>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <FLASH_FlushCaches+0x88>)
 8001102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001106:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <FLASH_FlushCaches+0x88>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <FLASH_FlushCaches+0x88>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001112:	6013      	str	r3, [r2, #0]
  }
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	@ (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	@ (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af02      	add	r7, sp, #8
 80014c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e101      	b.n	80016d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f005 fd48 	bl	8006f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fe:	d102      	bne.n	8001506 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 ff49 	bl	80033a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7c1a      	ldrb	r2, [r3, #16]
 8001518:	f88d 2000 	strb.w	r2, [sp]
 800151c:	3304      	adds	r3, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	f001 fe28 	bl	8003174 <USB_CoreInit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0ce      	b.n	80016d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f001 ff41 	bl	80033c4 <USB_SetCurrentMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0bf      	b.n	80016d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e04a      	b.n	80015f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3315      	adds	r3, #21
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3314      	adds	r3, #20
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	b298      	uxth	r0, r3
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	332e      	adds	r3, #46	@ 0x2e
 8001596:	4602      	mov	r2, r0
 8001598:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3318      	adds	r3, #24
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	331c      	adds	r3, #28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3320      	adds	r3, #32
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3324      	adds	r3, #36	@ 0x24
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3af      	bcc.n	800155a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e044      	b.n	800168a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	3301      	adds	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3b5      	bcc.n	8001600 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7c1a      	ldrb	r2, [r3, #16]
 800169c:	f88d 2000 	strb.w	r2, [sp]
 80016a0:	3304      	adds	r3, #4
 80016a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a4:	f001 feda 	bl	800345c <USB_DevInit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00c      	b.n	80016d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fe48 	bl	8004362 <USB_DevDisconnect>

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_PCD_Start+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e022      	b.n	800173e <HAL_PCD_Start+0x62>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001718:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fe2b 	bl	8003380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fdf6 	bl	8004320 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_PCD_Stop+0x1c>
 800175e:	2302      	movs	r3, #2
 8001760:	e028      	b.n	80017b4 <HAL_PCD_Stop+0x6e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fe17 	bl	80033a2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fdf2 	bl	8004362 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2110      	movs	r1, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f001 ffcd 	bl	8003724 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800179a:	2b01      	cmp	r3, #1
 800179c:	d105      	bne.n	80017aa <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b08d      	sub	sp, #52	@ 0x34
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fe79 	bl	80044ca <USB_GetMode>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 848c 	bne.w	80020f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fddd 	bl	80043a4 <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8482 	beq.w	80020f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fdca 	bl	80043a4 <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d107      	bne.n	800182a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f002 0202 	and.w	r2, r2, #2
 8001828:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fdb8 	bl	80043a4 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b10      	cmp	r3, #16
 800183c:	d161      	bne.n	8001902 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0210 	bic.w	r2, r2, #16
 800184c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f003 020f 	and.w	r2, r3, #15
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	3304      	adds	r3, #4
 800186c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	0c5b      	lsrs	r3, r3, #17
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	2b02      	cmp	r3, #2
 8001878:	d124      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d035      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001894:	b29b      	uxth	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f002 fbef 	bl	800407c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018aa:	441a      	add	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018bc:	441a      	add	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	e016      	b.n	80018f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	0c5b      	lsrs	r3, r3, #17
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d110      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018d6:	2208      	movs	r2, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	6a38      	ldr	r0, [r7, #32]
 80018dc:	f002 fbce 	bl	800407c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ec:	441a      	add	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 0210 	orr.w	r2, r2, #16
 8001900:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fd4c 	bl	80043a4 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001912:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001916:	f040 80a7 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fd51 	bl	80043ca <USB_ReadDevAllOutEpInterrupt>
 8001928:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800192a:	e099      	b.n	8001a60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 808e 	beq.w	8001a54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fd75 	bl	8004432 <USB_ReadDevOutEPInterrupt>
 8001948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001960:	461a      	mov	r2, r3
 8001962:	2301      	movs	r3, #1
 8001964:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fe41 	bl	80025f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001984:	461a      	mov	r2, r3
 8001986:	2308      	movs	r3, #8
 8001988:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800198a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 ff17 	bl	80027c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019a8:	461a      	mov	r2, r3
 80019aa:	2310      	movs	r3, #16
 80019ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d030      	beq.n	8001a1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c0:	2b80      	cmp	r3, #128	@ 0x80
 80019c2:	d109      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	78db      	ldrb	r3, [r3, #3]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f005 fbc2 	bl	800718c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a14:	461a      	mov	r2, r3
 8001a16:	2302      	movs	r3, #2
 8001a18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a30:	461a      	mov	r2, r3
 8001a32:	2320      	movs	r3, #32
 8001a34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	3301      	adds	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f47f af62 	bne.w	800192c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fc99 	bl	80043a4 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a7c:	f040 80db 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fcba 	bl	80043fe <USB_ReadDevAllInEpInterrupt>
 8001a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001a90:	e0cd      	b.n	8001c2e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80c2 	beq.w	8001c22 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fce0 	bl	800446e <USB_ReadDevInEPInterrupt>
 8001aae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d057      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69f9      	ldr	r1, [r7, #28]
 8001ad6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ada:	4013      	ands	r3, r2
 8001adc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aea:	461a      	mov	r2, r3
 8001aec:	2301      	movs	r3, #1
 8001aee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	799b      	ldrb	r3, [r3, #6]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d132      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	3320      	adds	r3, #32
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4403      	add	r3, r0
 8001b18:	331c      	adds	r3, #28
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4419      	add	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4403      	add	r3, r0
 8001b2c:	3320      	adds	r3, #32
 8001b2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x3a2>
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3324      	adds	r3, #36	@ 0x24
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d108      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b56:	461a      	mov	r2, r3
 8001b58:	2101      	movs	r1, #1
 8001b5a:	f002 fce7 	bl	800452c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f005 fa8c 	bl	8007082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b80:	461a      	mov	r2, r3
 8001b82:	2308      	movs	r3, #8
 8001b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2340      	movs	r3, #64	@ 0x40
 8001bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bca:	6a38      	ldr	r0, [r7, #32]
 8001bcc:	f001 fdaa 	bl	8003724 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3310      	adds	r3, #16
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3304      	adds	r3, #4
 8001be2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f005 fad9 	bl	80071b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fc5b 	bl	80024d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f af2e 	bne.w	8001a92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fbb2 	bl	80043a4 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c4a:	d122      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c72:	2100      	movs	r1, #0
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fe41 	bl	80028fc <HAL_PCDEx_LPM_Callback>
 8001c7a:	e002      	b.n	8001c82 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f005 fa77 	bl	8007170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fb84 	bl	80043a4 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ca6:	d112      	bne.n	8001cce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f005 fa33 	bl	8007124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ccc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fb66 	bl	80043a4 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce2:	f040 80b7 	bne.w	8001e54 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2110      	movs	r1, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fd0f 	bl	8003724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d0a:	e046      	b.n	8001d9a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d30:	0151      	lsls	r1, r2, #5
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	440a      	add	r2, r1
 8001d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d64:	0151      	lsls	r1, r2, #5
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	440a      	add	r2, r1
 8001d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d84:	0151      	lsls	r1, r2, #5
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	440a      	add	r2, r1
 8001d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d96:	3301      	adds	r3, #1
 8001d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d3b2      	bcc.n	8001d0c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001db4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001db8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7bdb      	ldrb	r3, [r3, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd2:	f043 030b 	orr.w	r3, r3, #11
 8001dd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001de8:	f043 030b 	orr.w	r3, r3, #11
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	e015      	b.n	8001e1c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e02:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e16:	f043 030b 	orr.w	r3, r3, #11
 8001e1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f002 fb74 	bl	800452c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 faa3 	bl	80043a4 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e68:	d123      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fb39 	bl	80044e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fccc 	bl	8003816 <USB_GetDevSpeed>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681c      	ldr	r4, [r3, #0]
 8001e8a:	f001 f967 	bl	800315c <HAL_RCC_GetHCLKFreq>
 8001e8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e94:	461a      	mov	r2, r3
 8001e96:	4620      	mov	r0, r4
 8001e98:	f001 f9d0 	bl	800323c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f005 f918 	bl	80070d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fa74 	bl	80043a4 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d10a      	bne.n	8001edc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f005 f8f5 	bl	80070b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f002 0208 	and.w	r2, r2, #8
 8001eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fa5f 	bl	80043a4 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b80      	cmp	r3, #128	@ 0x80
 8001eee:	d123      	bne.n	8001f38 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001efc:	2301      	movs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e014      	b.n	8001f2c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 faa8 	bl	8002476 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	3301      	adds	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d3e4      	bcc.n	8001f02 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fa31 	bl	80043a4 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f4c:	d13c      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f4e:	2301      	movs	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f52:	e02b      	b.n	8001fac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3318      	adds	r3, #24
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d115      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da12      	bge.n	8001fa6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3317      	adds	r3, #23
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fa68 	bl	8002476 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	3301      	adds	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	791b      	ldrb	r3, [r3, #4]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d3cd      	bcc.n	8001f54 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 f9e9 	bl	80043a4 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fdc:	d156      	bne.n	800208c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fde:	2301      	movs	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe2:	e045      	b.n	8002070 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d12e      	bne.n	800206a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800200c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	da2b      	bge.n	800206a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800201e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002022:	429a      	cmp	r2, r3
 8002024:	d121      	bne.n	800206a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002066:	6053      	str	r3, [r2, #4]
            break;
 8002068:	e008      	b.n	800207c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	791b      	ldrb	r3, [r3, #4]
 8002074:	461a      	mov	r2, r3
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	4293      	cmp	r3, r2
 800207a:	d3b3      	bcc.n	8001fe4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800208a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f002 f987 	bl	80043a4 <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a0:	d10a      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f005 f896 	bl	80071d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80020b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 f971 	bl	80043a4 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d115      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f005 f886 	bl	80071f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	e000      	b.n	80020f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80020f6:	bf00      	nop
    }
  }
}
 80020f8:	3734      	adds	r7, #52	@ 0x34
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}

080020fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_PCD_SetAddress+0x1a>
 8002114:	2302      	movs	r3, #2
 8002116:	e012      	b.n	800213e <HAL_PCD_SetAddress+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f002 f8d0 	bl	80042d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	461a      	mov	r2, r3
 8002154:	4603      	mov	r3, r0
 8002156:	70fb      	strb	r3, [r7, #3]
 8002158:	460b      	mov	r3, r1
 800215a:	803b      	strh	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da0f      	bge.n	800218c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3310      	adds	r3, #16
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00f      	b.n	80021ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80021b8:	883b      	ldrh	r3, [r7, #0]
 80021ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	78ba      	ldrb	r2, [r7, #2]
 80021c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d102      	bne.n	80021e6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_EP_Open+0xae>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e00e      	b.n	8002212 <HAL_PCD_EP_Open+0xcc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f001 fb2c 	bl	8003860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002210:	7afb      	ldrb	r3, [r7, #11]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	f003 020f 	and.w	r2, r3, #15
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225c:	7afb      	ldrb	r3, [r7, #11]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	b2da      	uxtb	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	799b      	ldrb	r3, [r3, #6]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	799b      	ldrb	r3, [r3, #6]
 800227e:	461a      	mov	r2, r3
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	f001 fb75 	bl	8003970 <USB_EPStartXfer>

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	460b      	mov	r3, r1
 800229e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	3310      	adds	r3, #16
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2201      	movs	r2, #1
 80022ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	799b      	ldrb	r3, [r3, #6]
 80022f2:	461a      	mov	r2, r3
 80022f4:	6979      	ldr	r1, [r7, #20]
 80022f6:	f001 fb3b 	bl	8003970 <USB_EPStartXfer>

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	7912      	ldrb	r2, [r2, #4]
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e04f      	b.n	80023c2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da0f      	bge.n	800234a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 020f 	and.w	r2, r3, #15
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	3310      	adds	r3, #16
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	705a      	strb	r2, [r3, #1]
 8002348:	e00d      	b.n	8002366 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	3304      	adds	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_PCD_EP_SetStall+0x82>
 8002382:	2302      	movs	r3, #2
 8002384:	e01d      	b.n	80023c2 <HAL_PCD_EP_SetStall+0xbe>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	4618      	mov	r0, r3
 8002396:	f001 fec9 	bl	800412c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7999      	ldrb	r1, [r3, #6]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023b2:	461a      	mov	r2, r3
 80023b4:	f002 f8ba 	bl	800452c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	7912      	ldrb	r2, [r2, #4]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e042      	b.n	800246e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da0f      	bge.n	8002410 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3310      	adds	r3, #16
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	3304      	adds	r3, #4
 8002406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	705a      	strb	r2, [r3, #1]
 800240e:	e00f      	b.n	8002430 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_EP_ClrStall+0x86>
 800244c:	2302      	movs	r3, #2
 800244e:	e00e      	b.n	800246e <HAL_PCD_EP_ClrStall+0xa4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68f9      	ldr	r1, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fed2 	bl	8004208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da0c      	bge.n	80024a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	3310      	adds	r3, #16
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e00c      	b.n	80024be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 020f 	and.w	r2, r3, #15
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 fcf1 	bl	8003eac <USB_EPStopXfer>
 80024ca:	4603      	mov	r3, r0
 80024cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024ce:	7afb      	ldrb	r3, [r7, #11]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3310      	adds	r3, #16
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	429a      	cmp	r2, r3
 800250a:	d901      	bls.n	8002510 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e06b      	b.n	80025e8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	429a      	cmp	r2, r3
 8002524:	d902      	bls.n	800252c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3303      	adds	r3, #3
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002534:	e02a      	b.n	800258c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d902      	bls.n	8002552 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3303      	adds	r3, #3
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4603      	mov	r3, r0
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f001 fd46 	bl	8004000 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	441a      	add	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d809      	bhi.n	80025b6 <PCD_WriteEmptyTxFifo+0xde>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d203      	bcs.n	80025b6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1bf      	bne.n	8002536 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d811      	bhi.n	80025e6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	43db      	mvns	r3, r3
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025e2:	4013      	ands	r3, r2
 80025e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	333c      	adds	r3, #60	@ 0x3c
 8002608:	3304      	adds	r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	799b      	ldrb	r3, [r3, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d17b      	bne.n	800271e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4a61      	ldr	r2, [pc, #388]	@ (80027b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	f240 80b9 	bls.w	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80b3 	beq.w	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002652:	461a      	mov	r2, r3
 8002654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002658:	6093      	str	r3, [r2, #8]
 800265a:	e0a7      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	2320      	movs	r3, #32
 8002676:	6093      	str	r3, [r2, #8]
 8002678:	e098      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8093 	bne.w	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d90f      	bls.n	80026ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026a4:	461a      	mov	r2, r3
 80026a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026aa:	6093      	str	r3, [r2, #8]
 80026ac:	e07e      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	0159      	lsls	r1, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d114      	bne.n	8002710 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026f8:	461a      	mov	r2, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	f001 ff16 	bl	800452c <USB_EP0_OutStart>
 8002700:	e006      	b.n	8002710 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	441a      	add	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f004 fc98 	bl	800704c <HAL_PCD_DataOutStageCallback>
 800271c:	e046      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d124      	bne.n	8002770 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273c:	461a      	mov	r2, r3
 800273e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	e032      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	2320      	movs	r3, #32
 8002760:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f004 fc6f 	bl	800704c <HAL_PCD_DataOutStageCallback>
 800276e:	e01d      	b.n	80027ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d114      	bne.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002798:	461a      	mov	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	f001 fec6 	bl	800452c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f004 fc50 	bl	800704c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	4f54300a 	.word	0x4f54300a
 80027bc:	4f54310a 	.word	0x4f54310a

080027c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	333c      	adds	r3, #60	@ 0x3c
 80027d8:	3304      	adds	r3, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <PCD_EP_OutSetupPacket_int+0x88>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d90e      	bls.n	8002814 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002812:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f004 fc07 	bl	8007028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <PCD_EP_OutSetupPacket_int+0x88>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d90c      	bls.n	800283c <PCD_EP_OutSetupPacket_int+0x7c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	799b      	ldrb	r3, [r3, #6]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	f001 fe78 	bl	800452c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	4f54300a 	.word	0x4f54300a

0800284c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
 8002858:	4613      	mov	r3, r2
 800285a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800286a:	883b      	ldrh	r3, [r7, #0]
 800286c:	0419      	lsls	r1, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	430a      	orrs	r2, r1
 8002876:	629a      	str	r2, [r3, #40]	@ 0x28
 8002878:	e028      	b.n	80028cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e00d      	b.n	80028aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3340      	adds	r3, #64	@ 0x40
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4413      	add	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3301      	adds	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d3ec      	bcc.n	800288e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028b4:	883b      	ldrh	r3, [r7, #0]
 80028b6:	0418      	lsls	r0, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	3b01      	subs	r3, #1
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	4302      	orrs	r2, r0
 80028c4:	3340      	adds	r3, #64	@ 0x40
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e267      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d075      	beq.n	8002a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002932:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b85      	ldr	r3, [pc, #532]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002946:	2b08      	cmp	r3, #8
 8002948:	d112      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294a:	4b82      	ldr	r3, [pc, #520]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002956:	d10b      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	4b7e      	ldr	r3, [pc, #504]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05b      	beq.n	8002a1c <HAL_RCC_OscConfig+0x108>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d157      	bne.n	8002a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e242      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x74>
 800297a:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x98>
 8002992:	4b70      	ldr	r3, [pc, #448]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6f      	ldr	r2, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 80029ac:	4b69      	ldr	r3, [pc, #420]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a68      	ldr	r2, [pc, #416]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fd ff90 	bl	80008f0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fd ff8c 	bl	80008f0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	@ 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e207      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xc0>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fd ff7c 	bl	80008f0 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fd ff78 	bl	80008f0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1f3      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0xe8>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b44      	ldr	r3, [pc, #272]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1c7      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4937      	ldr	r1, [pc, #220]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RCC_OscConfig+0x244>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fd ff31 	bl	80008f0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fd ff2d 	bl	80008f0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1a8      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4925      	ldr	r1, [pc, #148]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <HAL_RCC_OscConfig+0x244>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fd ff10 	bl	80008f0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fd ff0c 	bl	80008f0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e187      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x248>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fd fef0 	bl	80008f0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fd feec 	bl	80008f0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e167      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x200>
 8002b32:	e01b      	b.n	8002b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_RCC_OscConfig+0x248>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fd fed9 	bl	80008f0 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00e      	b.n	8002b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fd fed5 	bl	80008f0 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d907      	bls.n	8002b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e150      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ea      	bne.n	8002b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8097 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b81      	ldr	r3, [pc, #516]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4a7c      	ldr	r2, [pc, #496]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b77      	ldr	r3, [pc, #476]	@ (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b74      	ldr	r3, [pc, #464]	@ (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a73      	ldr	r2, [pc, #460]	@ (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fd fe95 	bl	80008f0 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fd fe91 	bl	80008f0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e10c      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2ea>
 8002bf0:	4b64      	ldr	r3, [pc, #400]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a63      	ldr	r2, [pc, #396]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x324>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x30c>
 8002c06:	4b5f      	ldr	r3, [pc, #380]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	4b5c      	ldr	r3, [pc, #368]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	4a5b      	ldr	r2, [pc, #364]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x324>
 8002c20:	4b58      	ldr	r3, [pc, #352]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a57      	ldr	r2, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2c:	4b55      	ldr	r3, [pc, #340]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a54      	ldr	r2, [pc, #336]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fd fe56 	bl	80008f0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fd fe52 	bl	80008f0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0cb      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b49      	ldr	r3, [pc, #292]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCC_OscConfig+0x334>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7fd fe40 	bl	80008f0 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fd fe3c 	bl	80008f0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0b5      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	4a38      	ldr	r2, [pc, #224]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a1 	beq.w	8002df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb2:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d05c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d141      	bne.n	8002d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fd fe10 	bl	80008f0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fd fe0c 	bl	80008f0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e087      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b27      	ldr	r3, [pc, #156]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	491b      	ldr	r1, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fd fde5 	bl	80008f0 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fd fde1 	bl	80008f0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e05c      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x416>
 8002d48:	e054      	b.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fdce 	bl	80008f0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fd fdca 	bl	80008f0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e045      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x444>
 8002d76:	e03d      	b.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e038      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_RCC_OscConfig+0x4ec>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d121      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d111      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fcfc 	bl	80008f0 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fcf8 	bl	80008f0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fc5c 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	0800769c 	.word	0x0800769c
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b090      	sub	sp, #64	@ 0x40
 8002fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d00d      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x40>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	f200 80a1 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x16c>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x3a>
 8003002:	e09b      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b53      	ldr	r3, [pc, #332]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x184>)
 8003006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003008:	e09b      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300a:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800300c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800300e:	e098      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003010:	4b4f      	ldr	r3, [pc, #316]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d028      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	2200      	movs	r2, #0
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	627a      	str	r2, [r7, #36]	@ 0x24
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003038:	2100      	movs	r1, #0
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800303c:	fb03 f201 	mul.w	r2, r3, r1
 8003040:	2300      	movs	r3, #0
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	4413      	add	r3, r2
 8003048:	4a43      	ldr	r2, [pc, #268]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800304a:	fba0 1202 	umull	r1, r2, r0, r2
 800304e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003050:	460a      	mov	r2, r1
 8003052:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003056:	4413      	add	r3, r2
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305c:	2200      	movs	r2, #0
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	61fa      	str	r2, [r7, #28]
 8003062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800306a:	f7fd f8ad 	bl	80001c8 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003076:	e053      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	617a      	str	r2, [r7, #20]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800308a:	f04f 0b00 	mov.w	fp, #0
 800308e:	4652      	mov	r2, sl
 8003090:	465b      	mov	r3, fp
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	0159      	lsls	r1, r3, #5
 800309c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a0:	0150      	lsls	r0, r2, #5
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	ebb2 080a 	subs.w	r8, r2, sl
 80030aa:	eb63 090b 	sbc.w	r9, r3, fp
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030c2:	ebb2 0408 	subs.w	r4, r2, r8
 80030c6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	00eb      	lsls	r3, r5, #3
 80030d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	4614      	mov	r4, r2
 80030dc:	461d      	mov	r5, r3
 80030de:	eb14 030a 	adds.w	r3, r4, sl
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	eb45 030b 	adc.w	r3, r5, fp
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	2200      	movs	r2, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	60fa      	str	r2, [r7, #12]
 8003110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003114:	f7fd f858 	bl	80001c8 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003130:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x184>)
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003144:	4618      	mov	r0, r3
 8003146:	3740      	adds	r7, #64	@ 0x40
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	017d7840 	.word	0x017d7840

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003174:	b084      	sub	sp, #16
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	f107 001c 	add.w	r0, r7, #28
 8003182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003186:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800318a:	2b01      	cmp	r3, #1
 800318c:	d123      	bne.n	80031d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80031a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f001 fa0c 	bl	80045e8 <USB_CoreReset>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e01b      	b.n	800320e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 fa00 	bl	80045e8 <USB_CoreReset>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8003200:	e005      	b.n	800320e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800320e:	7fbb      	ldrb	r3, [r7, #30]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10b      	bne.n	800322c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f043 0206 	orr.w	r2, r3, #6
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003238:	b004      	add	sp, #16
 800323a:	4770      	bx	lr

0800323c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d165      	bne.n	800331c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a41      	ldr	r2, [pc, #260]	@ (8003358 <USB_SetTurnaroundTime+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d906      	bls.n	8003266 <USB_SetTurnaroundTime+0x2a>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <USB_SetTurnaroundTime+0x120>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d202      	bcs.n	8003266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003260:	230f      	movs	r3, #15
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e062      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a3c      	ldr	r2, [pc, #240]	@ (800335c <USB_SetTurnaroundTime+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d306      	bcc.n	800327c <USB_SetTurnaroundTime+0x40>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a3b      	ldr	r2, [pc, #236]	@ (8003360 <USB_SetTurnaroundTime+0x124>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d202      	bcs.n	800327c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003276:	230e      	movs	r3, #14
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e057      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a38      	ldr	r2, [pc, #224]	@ (8003360 <USB_SetTurnaroundTime+0x124>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d306      	bcc.n	8003292 <USB_SetTurnaroundTime+0x56>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4a37      	ldr	r2, [pc, #220]	@ (8003364 <USB_SetTurnaroundTime+0x128>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d202      	bcs.n	8003292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800328c:	230d      	movs	r3, #13
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e04c      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <USB_SetTurnaroundTime+0x128>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d306      	bcc.n	80032a8 <USB_SetTurnaroundTime+0x6c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4a32      	ldr	r2, [pc, #200]	@ (8003368 <USB_SetTurnaroundTime+0x12c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d802      	bhi.n	80032a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80032a2:	230c      	movs	r3, #12
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e041      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003368 <USB_SetTurnaroundTime+0x12c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d906      	bls.n	80032be <USB_SetTurnaroundTime+0x82>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a2e      	ldr	r2, [pc, #184]	@ (800336c <USB_SetTurnaroundTime+0x130>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d802      	bhi.n	80032be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80032b8:	230b      	movs	r3, #11
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e036      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <USB_SetTurnaroundTime+0x130>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d906      	bls.n	80032d4 <USB_SetTurnaroundTime+0x98>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4a29      	ldr	r2, [pc, #164]	@ (8003370 <USB_SetTurnaroundTime+0x134>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032ce:	230a      	movs	r3, #10
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e02b      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4a26      	ldr	r2, [pc, #152]	@ (8003370 <USB_SetTurnaroundTime+0x134>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d906      	bls.n	80032ea <USB_SetTurnaroundTime+0xae>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <USB_SetTurnaroundTime+0x138>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d202      	bcs.n	80032ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032e4:	2309      	movs	r3, #9
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e020      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <USB_SetTurnaroundTime+0x138>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d306      	bcc.n	8003300 <USB_SetTurnaroundTime+0xc4>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <USB_SetTurnaroundTime+0x13c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80032fa:	2308      	movs	r3, #8
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e015      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <USB_SetTurnaroundTime+0x13c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d906      	bls.n	8003316 <USB_SetTurnaroundTime+0xda>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <USB_SetTurnaroundTime+0x140>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d202      	bcs.n	8003316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003310:	2307      	movs	r3, #7
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e00a      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003316:	2306      	movs	r3, #6
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e007      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003322:	2309      	movs	r3, #9
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e001      	b.n	800332c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003328:	2309      	movs	r3, #9
 800332a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	029b      	lsls	r3, r3, #10
 8003340:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	00d8acbf 	.word	0x00d8acbf
 800335c:	00e4e1c0 	.word	0x00e4e1c0
 8003360:	00f42400 	.word	0x00f42400
 8003364:	01067380 	.word	0x01067380
 8003368:	011a499f 	.word	0x011a499f
 800336c:	01312cff 	.word	0x01312cff
 8003370:	014ca43f 	.word	0x014ca43f
 8003374:	016e3600 	.word	0x016e3600
 8003378:	01a6ab1f 	.word	0x01a6ab1f
 800337c:	01e84800 	.word	0x01e84800

08003380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d115      	bne.n	8003412 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033f2:	200a      	movs	r0, #10
 80033f4:	f7fd fa88 	bl	8000908 <HAL_Delay>
      ms += 10U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	330a      	adds	r3, #10
 80033fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f001 f863 	bl	80044ca <USB_GetMode>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d01e      	beq.n	8003448 <USB_SetCurrentMode+0x84>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2bc7      	cmp	r3, #199	@ 0xc7
 800340e:	d9f0      	bls.n	80033f2 <USB_SetCurrentMode+0x2e>
 8003410:	e01a      	b.n	8003448 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d115      	bne.n	8003444 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003424:	200a      	movs	r0, #10
 8003426:	f7fd fa6f 	bl	8000908 <HAL_Delay>
      ms += 10U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	330a      	adds	r3, #10
 800342e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f001 f84a 	bl	80044ca <USB_GetMode>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <USB_SetCurrentMode+0x84>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003440:	d9f0      	bls.n	8003424 <USB_SetCurrentMode+0x60>
 8003442:	e001      	b.n	8003448 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e005      	b.n	8003454 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2bc8      	cmp	r3, #200	@ 0xc8
 800344c:	d101      	bne.n	8003452 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800345c:	b084      	sub	sp, #16
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800346a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e009      	b.n	8003490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3340      	adds	r3, #64	@ 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3301      	adds	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0e      	cmp	r3, #14
 8003494:	d9f2      	bls.n	800347c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003496:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11c      	bne.n	80034d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80034d6:	e00b      	b.n	80034f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034f6:	461a      	mov	r2, r3
 80034f8:	2300      	movs	r3, #0
 80034fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800350c:	2100      	movs	r1, #0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f968 	bl	80037e4 <USB_SetDevSpeed>
 8003514:	e008      	b.n	8003528 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003516:	2101      	movs	r1, #1
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f963 	bl	80037e4 <USB_SetDevSpeed>
 800351e:	e003      	b.n	8003528 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003520:	2103      	movs	r1, #3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f95e 	bl	80037e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003528:	2110      	movs	r1, #16
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8fa 	bl	8003724 <USB_FlushTxFifo>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f924 	bl	8003788 <USB_FlushRxFifo>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355c:	461a      	mov	r2, r3
 800355e:	2300      	movs	r3, #0
 8003560:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003568:	461a      	mov	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e043      	b.n	80035fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800358a:	d118      	bne.n	80035be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e013      	b.n	80035d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e008      	b.n	80035d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	2300      	movs	r3, #0
 80035e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ee:	461a      	mov	r2, r3
 80035f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003600:	461a      	mov	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4293      	cmp	r3, r2
 8003606:	d3b5      	bcc.n	8003574 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e043      	b.n	8003696 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003624:	d118      	bne.n	8003658 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e013      	b.n	800366a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e008      	b.n	800366a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	2300      	movs	r3, #0
 8003668:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003676:	461a      	mov	r2, r3
 8003678:	2300      	movs	r3, #0
 800367a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800368e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	3301      	adds	r3, #1
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800369a:	461a      	mov	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4293      	cmp	r3, r2
 80036a0:	d3b5      	bcc.n	800360e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f043 0210 	orr.w	r2, r3, #16
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <USB_DevInit+0x2c4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371c:	b004      	add	sp, #16
 800371e:	4770      	bx	lr
 8003720:	803c3800 	.word	0x803c3800

08003724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800373e:	d901      	bls.n	8003744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e01b      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	daf2      	bge.n	8003732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	019b      	lsls	r3, r3, #6
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003768:	d901      	bls.n	800376e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e006      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d0f0      	beq.n	800375c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037a0:	d901      	bls.n	80037a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e018      	b.n	80037d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	daf2      	bge.n	8003794 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2210      	movs	r2, #16
 80037b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037c4:	d901      	bls.n	80037ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e006      	b.n	80037d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d0f0      	beq.n	80037b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
 800383a:	e00a      	b.n	8003852 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d002      	beq.n	8003848 <USB_GetDevSpeed+0x32>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b06      	cmp	r3, #6
 8003846:	d102      	bne.n	800384e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003848:	2302      	movs	r3, #2
 800384a:	75fb      	strb	r3, [r7, #23]
 800384c:	e001      	b.n	8003852 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800384e:	230f      	movs	r3, #15
 8003850:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d13a      	bne.n	80038f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800389a:	4313      	orrs	r3, r2
 800389c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d155      	bne.n	8003960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	791b      	ldrb	r3, [r3, #4]
 80038ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	059b      	lsls	r3, r3, #22
 80038d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038d8:	4313      	orrs	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e036      	b.n	8003960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003910:	4313      	orrs	r3, r2
 8003912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11a      	bne.n	8003960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003946:	430b      	orrs	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800395e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	@ 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 817f 	bne.w	8003c90 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d132      	bne.n	8003a00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80039b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80039bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f8:	0cdb      	lsrs	r3, r3, #19
 80039fa:	04db      	lsls	r3, r3, #19
 80039fc:	6113      	str	r3, [r2, #16]
 80039fe:	e097      	b.n	8003b30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a1a:	0cdb      	lsrs	r3, r3, #19
 8003a1c:	04db      	lsls	r3, r3, #19
 8003a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11a      	bne.n	8003a80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d903      	bls.n	8003a5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a7c:	6113      	str	r3, [r2, #16]
 8003a7e:	e044      	b.n	8003b0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4413      	add	r3, r2
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	8afb      	ldrh	r3, [r7, #22]
 8003aa6:	04d9      	lsls	r1, r3, #19
 8003aa8:	4ba4      	ldr	r3, [pc, #656]	@ (8003d3c <USB_EPStartXfer+0x3cc>)
 8003aaa:	400b      	ands	r3, r1
 8003aac:	69b9      	ldr	r1, [r7, #24]
 8003aae:	0148      	lsls	r0, r1, #5
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	4401      	add	r1, r0
 8003ab4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	791b      	ldrb	r3, [r3, #4]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d122      	bne.n	8003b0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ade:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003ae2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	075b      	lsls	r3, r3, #29
 8003af6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	0148      	lsls	r0, r1, #5
 8003afe:	69f9      	ldr	r1, [r7, #28]
 8003b00:	4401      	add	r1, r0
 8003b02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	0148      	lsls	r0, r1, #5
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	4401      	add	r1, r0
 8003b28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d14b      	bne.n	8003bce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	791b      	ldrb	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d128      	bne.n	8003bac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d110      	bne.n	8003b8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00f      	b.n	8003bac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003baa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bc6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e166      	b.n	8003e9c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003be8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003bec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	791b      	ldrb	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d015      	beq.n	8003c22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 814e 	beq.w	8003e9c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	69f9      	ldr	r1, [r7, #28]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8003c20:	e13c      	b.n	8003e9c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d110      	bne.n	8003c54 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00f      	b.n	8003c74 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	b298      	uxth	r0, r3
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4603      	mov	r3, r0
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f9b9 	bl	8004000 <USB_WritePacket>
 8003c8e:	e105      	b.n	8003e9c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003caa:	0cdb      	lsrs	r3, r3, #19
 8003cac:	04db      	lsls	r3, r3, #19
 8003cae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003cce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003cd2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d132      	bne.n	8003d40 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	0148      	lsls	r0, r1, #5
 8003d0c:	69f9      	ldr	r1, [r7, #28]
 8003d0e:	4401      	add	r1, r0
 8003d10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d14:	4313      	orrs	r3, r2
 8003d16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d36:	6113      	str	r3, [r2, #16]
 8003d38:	e062      	b.n	8003e00 <USB_EPStartXfer+0x490>
 8003d3a:	bf00      	nop
 8003d3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d123      	bne.n	8003d90 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5e:	69b9      	ldr	r1, [r7, #24]
 8003d60:	0148      	lsls	r0, r1, #5
 8003d62:	69f9      	ldr	r1, [r7, #28]
 8003d64:	4401      	add	r1, r0
 8003d66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d8c:	6113      	str	r3, [r2, #16]
 8003d8e:	e037      	b.n	8003e00 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	8afa      	ldrh	r2, [r7, #22]
 8003dac:	fb03 f202 	mul.w	r2, r3, r2
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	8afb      	ldrh	r3, [r7, #22]
 8003dc4:	04d9      	lsls	r1, r3, #19
 8003dc6:	4b38      	ldr	r3, [pc, #224]	@ (8003ea8 <USB_EPStartXfer+0x538>)
 8003dc8:	400b      	ands	r3, r1
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	0148      	lsls	r0, r1, #5
 8003dce:	69f9      	ldr	r1, [r7, #28]
 8003dd0:	4401      	add	r1, r0
 8003dd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df0:	69b9      	ldr	r1, [r7, #24]
 8003df2:	0148      	lsls	r0, r1, #5
 8003df4:	69f9      	ldr	r1, [r7, #28]
 8003df6:	4401      	add	r1, r0
 8003df8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d10d      	bne.n	8003e22 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	68d9      	ldr	r1, [r3, #12]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1e:	460a      	mov	r2, r1
 8003e20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	791b      	ldrb	r3, [r3, #4]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d128      	bne.n	8003e7c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d110      	bne.n	8003e5c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00f      	b.n	8003e7c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	1ff80000 	.word	0x1ff80000

08003eac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d14a      	bne.n	8003f60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee2:	f040 8086 	bne.w	8003ff2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d902      	bls.n	8003f44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
          break;
 8003f42:	e056      	b.n	8003ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f5c:	d0e7      	beq.n	8003f2e <USB_EPStopXfer+0x82>
 8003f5e:	e048      	b.n	8003ff2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f78:	d13b      	bne.n	8003ff2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d902      	bls.n	8003fd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8003fd6:	e00c      	b.n	8003ff2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ff0:	d0e7      	beq.n	8003fc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	@ 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	460b      	mov	r3, r1
 8004010:	71fb      	strb	r3, [r7, #7]
 8004012:	4613      	mov	r3, r2
 8004014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800401e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d123      	bne.n	800406e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004026:	88bb      	ldrh	r3, [r7, #4]
 8004028:	3303      	adds	r3, #3
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e018      	b.n	8004066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	031a      	lsls	r2, r3, #12
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4413      	add	r3, r2
 800403c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004040:	461a      	mov	r2, r3
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3301      	adds	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	3301      	adds	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	d3e2      	bcc.n	8004034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3724      	adds	r7, #36	@ 0x24
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800407c:	b480      	push	{r7}
 800407e:	b08b      	sub	sp, #44	@ 0x2c
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	b29b      	uxth	r3, r3
 8004098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	e014      	b.n	80040d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	3301      	adds	r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	3301      	adds	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	3301      	adds	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	3301      	adds	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	3301      	adds	r3, #1
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3e6      	bcc.n	80040a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01e      	beq.n	800411e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ea:	461a      	mov	r2, r3
 80040ec:	f107 0310 	add.w	r3, r7, #16
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	b2da      	uxtb	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	701a      	strb	r2, [r3, #0]
      i++;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	3301      	adds	r3, #1
 800410a:	623b      	str	r3, [r7, #32]
      pDest++;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	3301      	adds	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004112:	8bfb      	ldrh	r3, [r7, #30]
 8004114:	3b01      	subs	r3, #1
 8004116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004118:	8bfb      	ldrh	r3, [r7, #30]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ea      	bne.n	80040f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004120:	4618      	mov	r0, r3
 8004122:	372c      	adds	r7, #44	@ 0x2c
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d12c      	bne.n	80041a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	db12      	blt.n	8004180 <USB_EPSetStall+0x54>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00f      	beq.n	8004180 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800417e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	440a      	add	r2, r1
 8004196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e02b      	b.n	80041fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db12      	blt.n	80041da <USB_EPSetStall+0xae>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d128      	bne.n	8004276 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800423e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004242:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	791b      	ldrb	r3, [r3, #4]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d003      	beq.n	8004254 <USB_EPClearStall+0x4c>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	791b      	ldrb	r3, [r3, #4]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d138      	bne.n	80042c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e027      	b.n	80042c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004290:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d003      	beq.n	80042a6 <USB_EPClearStall+0x9e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	791b      	ldrb	r3, [r3, #4]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d10f      	bne.n	80042c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800434e:	f023 0302 	bic.w	r3, r3, #2
 8004352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0c1b      	lsrs	r3, r3, #16
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	b29b      	uxth	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004460:	68bb      	ldr	r3, [r7, #8]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004490:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	01db      	lsls	r3, r3, #7
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044bc:	68bb      	ldr	r3, [r7, #8]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0301 	and.w	r3, r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004500:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004504:	f023 0307 	bic.w	r3, r3, #7
 8004508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	460b      	mov	r3, r1
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	333c      	adds	r3, #60	@ 0x3c
 8004542:	3304      	adds	r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4a26      	ldr	r2, [pc, #152]	@ (80045e4 <USB_EP0_OutStart+0xb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d90a      	bls.n	8004566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004560:	d101      	bne.n	8004566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e037      	b.n	80045d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004594:	f043 0318 	orr.w	r3, r3, #24
 8004598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80045ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10f      	bne.n	80045d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80045d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	4f54300a 	.word	0x4f54300a

080045e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004600:	d901      	bls.n	8004606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e01b      	b.n	800463e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	daf2      	bge.n	80045f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800462a:	d901      	bls.n	8004630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e006      	b.n	800463e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d0f0      	beq.n	800461e <USB_CoreReset+0x36>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800465e:	2303      	movs	r3, #3
 8004660:	e01f      	b.n	80046a2 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	79fa      	ldrb	r2, [r7, #7]
 8004694:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f002 fdb8 	bl	800720c <USBD_LL_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

  return ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80046be:	2303      	movs	r3, #3
 80046c0:	e025      	b.n	800470e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	32ae      	adds	r2, #174	@ 0xae
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00f      	beq.n	80046fe <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	32ae      	adds	r2, #174	@ 0xae
 80046e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f107 020e 	add.w	r2, r7, #14
 80046f2:	4610      	mov	r0, r2
 80046f4:	4798      	blx	r3
 80046f6:	4602      	mov	r2, r0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f002 fdc0 	bl	80072a4 <USBD_LL_Start>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f002 fdcf 	bl	80072da <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6852      	ldr	r2, [r2, #4]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	4611      	mov	r1, r2
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800476c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	4611      	mov	r1, r2
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	4611      	mov	r1, r2
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80047d8:	2303      	movs	r3, #3
 80047da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f8fa 	bl	80059f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2b02      	cmp	r3, #2
 8004820:	d01a      	beq.n	8004858 <USBD_LL_SetupStage+0x72>
 8004822:	2b02      	cmp	r3, #2
 8004824:	d822      	bhi.n	800486c <USBD_LL_SetupStage+0x86>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <USBD_LL_SetupStage+0x4a>
 800482a:	2b01      	cmp	r3, #1
 800482c:	d00a      	beq.n	8004844 <USBD_LL_SetupStage+0x5e>
 800482e:	e01d      	b.n	800486c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb2b 	bl	8004e94 <USBD_StdDevReq>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
      break;
 8004842:	e020      	b.n	8004886 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb93 	bl	8004f78 <USBD_StdItfReq>
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]
      break;
 8004856:	e016      	b.n	8004886 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fbf5 	bl	8005050 <USBD_StdEPReq>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
      break;
 800486a:	e00c      	b.n	8004886 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004872:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004876:	b2db      	uxtb	r3, r3
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f002 fd6e 	bl	800735c <USBD_LL_StallEP>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	bf00      	nop
  }

  return ret;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	460b      	mov	r3, r1
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80048a2:	7afb      	ldrb	r3, [r7, #11]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d16e      	bne.n	8004986 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80048ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f040 8098 	bne.w	80049ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d913      	bls.n	80048f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	1ad2      	subs	r2, r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4293      	cmp	r3, r2
 80048e0:	bf28      	it	cs
 80048e2:	4613      	movcs	r3, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f002 f8fa 	bl	8006ae2 <USBD_CtlContinueRx>
 80048ee:	e07d      	b.n	80049ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d014      	beq.n	8004928 <USBD_LL_DataOutStage+0x98>
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d81d      	bhi.n	800493e <USBD_LL_DataOutStage+0xae>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <USBD_LL_DataOutStage+0x7c>
 8004906:	2b01      	cmp	r3, #1
 8004908:	d003      	beq.n	8004912 <USBD_LL_DataOutStage+0x82>
 800490a:	e018      	b.n	800493e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	75bb      	strb	r3, [r7, #22]
            break;
 8004910:	e018      	b.n	8004944 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fa64 	bl	8004dea <USBD_CoreFindIF>
 8004922:	4603      	mov	r3, r0
 8004924:	75bb      	strb	r3, [r7, #22]
            break;
 8004926:	e00d      	b.n	8004944 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800492e:	b2db      	uxtb	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fa66 	bl	8004e04 <USBD_CoreFindEP>
 8004938:	4603      	mov	r3, r0
 800493a:	75bb      	strb	r3, [r7, #22]
            break;
 800493c:	e002      	b.n	8004944 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	75bb      	strb	r3, [r7, #22]
            break;
 8004942:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004944:	7dbb      	ldrb	r3, [r7, #22]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b03      	cmp	r3, #3
 8004954:	d113      	bne.n	800497e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004956:	7dba      	ldrb	r2, [r7, #22]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	32ae      	adds	r2, #174	@ 0xae
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004966:	7dba      	ldrb	r2, [r7, #22]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800496e:	7dba      	ldrb	r2, [r7, #22]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	32ae      	adds	r2, #174	@ 0xae
 8004974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f002 f8c0 	bl	8006b04 <USBD_CtlSendStatus>
 8004984:	e032      	b.n	80049ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498c:	b2db      	uxtb	r3, r3
 800498e:	4619      	mov	r1, r3
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fa37 	bl	8004e04 <USBD_CoreFindEP>
 8004996:	4603      	mov	r3, r0
 8004998:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	2bff      	cmp	r3, #255	@ 0xff
 800499e:	d025      	beq.n	80049ec <USBD_LL_DataOutStage+0x15c>
 80049a0:	7dbb      	ldrb	r3, [r7, #22]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d122      	bne.n	80049ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d117      	bne.n	80049e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80049b2:	7dba      	ldrb	r2, [r7, #22]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	32ae      	adds	r2, #174	@ 0xae
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00f      	beq.n	80049e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80049c2:	7dba      	ldrb	r2, [r7, #22]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80049ca:	7dba      	ldrb	r2, [r7, #22]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	32ae      	adds	r2, #174	@ 0xae
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	7afa      	ldrb	r2, [r7, #11]
 80049d8:	4611      	mov	r1, r2
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	4798      	blx	r3
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	e000      	b.n	80049ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	460b      	mov	r3, r1
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d16f      	bne.n	8004aea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d15a      	bne.n	8004ad0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d914      	bls.n	8004a50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	1ad2      	subs	r2, r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f002 f822 	bl	8006a86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a42:	2300      	movs	r3, #0
 8004a44:	2200      	movs	r2, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f002 fd31 	bl	80074b0 <USBD_LL_PrepareReceive>
 8004a4e:	e03f      	b.n	8004ad0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d11c      	bne.n	8004a96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d316      	bcc.n	8004a96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d20f      	bcs.n	8004a96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f002 f803 	bl	8006a86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f002 fd0e 	bl	80074b0 <USBD_LL_PrepareReceive>
 8004a94:	e01c      	b.n	8004ad0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d10f      	bne.n	8004ac2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ac2:	2180      	movs	r1, #128	@ 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f002 fc49 	bl	800735c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f002 f82d 	bl	8006b2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d03a      	beq.n	8004b50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff fe42 	bl	8004764 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004ae8:	e032      	b.n	8004b50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f985 	bl	8004e04 <USBD_CoreFindEP>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2bff      	cmp	r3, #255	@ 0xff
 8004b02:	d025      	beq.n	8004b50 <USBD_LL_DataInStage+0x15a>
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d122      	bne.n	8004b50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d11c      	bne.n	8004b50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004b16:	7dfa      	ldrb	r2, [r7, #23]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	32ae      	adds	r2, #174	@ 0xae
 8004b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d014      	beq.n	8004b50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004b26:	7dfa      	ldrb	r2, [r7, #23]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004b2e:	7dfa      	ldrb	r2, [r7, #23]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	32ae      	adds	r2, #174	@ 0xae
 8004b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	7afa      	ldrb	r2, [r7, #11]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	4798      	blx	r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004b46:	7dbb      	ldrb	r3, [r7, #22]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004b4c:	7dbb      	ldrb	r3, [r7, #22]
 8004b4e:	e000      	b.n	8004b52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d014      	beq.n	8004bc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00e      	beq.n	8004bc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6852      	ldr	r2, [r2, #4]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bc0:	2340      	movs	r3, #64	@ 0x40
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f002 fba2 	bl	8007310 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2240      	movs	r2, #64	@ 0x40
 8004bd8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bdc:	2340      	movs	r3, #64	@ 0x40
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	@ 0x80
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f002 fb94 	bl	8007310 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2240      	movs	r2, #64	@ 0x40
 8004bf2:	621a      	str	r2, [r3, #32]

  return ret;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d006      	beq.n	8004c40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2204      	movs	r2, #4
 8004c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d106      	bne.n	8004c78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d110      	bne.n	8004cbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	32ae      	adds	r2, #174	@ 0xae
 8004cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e01c      	b.n	8004d22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d115      	bne.n	8004d20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	32ae      	adds	r2, #174	@ 0xae
 8004cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	32ae      	adds	r2, #174	@ 0xae
 8004d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	32ae      	adds	r2, #174	@ 0xae
 8004d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e01c      	b.n	8004d86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d115      	bne.n	8004d84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	32ae      	adds	r2, #174	@ 0xae
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	32ae      	adds	r2, #174	@ 0xae
 8004d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004df6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004e10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b087      	sub	sp, #28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004e74:	8a3b      	ldrh	r3, [r7, #16]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	b21a      	sxth	r2, r3
 8004e7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b21b      	sxth	r3, r3
 8004e82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004e84:	89fb      	ldrh	r3, [r7, #14]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	d005      	beq.n	8004eba <USBD_StdDevReq+0x26>
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d857      	bhi.n	8004f62 <USBD_StdDevReq+0xce>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00f      	beq.n	8004ed6 <USBD_StdDevReq+0x42>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d153      	bne.n	8004f62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	32ae      	adds	r2, #174	@ 0xae
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e04a      	b.n	8004f6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b09      	cmp	r3, #9
 8004edc:	d83b      	bhi.n	8004f56 <USBD_StdDevReq+0xc2>
 8004ede:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <USBD_StdDevReq+0x50>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f39 	.word	0x08004f39
 8004ee8:	08004f4d 	.word	0x08004f4d
 8004eec:	08004f57 	.word	0x08004f57
 8004ef0:	08004f43 	.word	0x08004f43
 8004ef4:	08004f57 	.word	0x08004f57
 8004ef8:	08004f17 	.word	0x08004f17
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f57 	.word	0x08004f57
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f21 	.word	0x08004f21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa3c 	bl	800538c <USBD_GetDescriptor>
          break;
 8004f14:	e024      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fbc7 	bl	80056ac <USBD_SetAddress>
          break;
 8004f1e:	e01f      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fc06 	bl	8005734 <USBD_SetConfig>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2c:	e018      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fca9 	bl	8005888 <USBD_GetConfig>
          break;
 8004f36:	e013      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fcda 	bl	80058f4 <USBD_GetStatus>
          break;
 8004f40:	e00e      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fd09 	bl	800595c <USBD_SetFeature>
          break;
 8004f4a:	e009      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fd2d 	bl	80059ae <USBD_ClrFeature>
          break;
 8004f54:	e004      	b.n	8004f60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fd84 	bl	8005a66 <USBD_CtlError>
          break;
 8004f5e:	bf00      	nop
      }
      break;
 8004f60:	e004      	b.n	8004f6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fd7e 	bl	8005a66 <USBD_CtlError>
      break;
 8004f6a:	bf00      	nop
  }

  return ret;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop

08004f78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d005      	beq.n	8004f9e <USBD_StdItfReq+0x26>
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d852      	bhi.n	800503c <USBD_StdItfReq+0xc4>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <USBD_StdItfReq+0x26>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d14e      	bne.n	800503c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d840      	bhi.n	800502e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	889b      	ldrh	r3, [r3, #4]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d836      	bhi.n	8005024 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	889b      	ldrh	r3, [r3, #4]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ff13 	bl	8004dea <USBD_CoreFindIF>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	2bff      	cmp	r3, #255	@ 0xff
 8004fcc:	d01d      	beq.n	800500a <USBD_StdItfReq+0x92>
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11a      	bne.n	800500a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8004fd4:	7bba      	ldrb	r2, [r7, #14]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	32ae      	adds	r2, #174	@ 0xae
 8004fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00f      	beq.n	8005004 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8004fe4:	7bba      	ldrb	r2, [r7, #14]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004fec:	7bba      	ldrb	r2, [r7, #14]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	32ae      	adds	r2, #174	@ 0xae
 8004ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005002:	e004      	b.n	800500e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005004:	2303      	movs	r3, #3
 8005006:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005008:	e001      	b.n	800500e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	88db      	ldrh	r3, [r3, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <USBD_StdItfReq+0xc0>
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fd71 	bl	8006b04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005022:	e009      	b.n	8005038 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd1d 	bl	8005a66 <USBD_CtlError>
          break;
 800502c:	e004      	b.n	8005038 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fd18 	bl	8005a66 <USBD_CtlError>
          break;
 8005036:	e000      	b.n	800503a <USBD_StdItfReq+0xc2>
          break;
 8005038:	bf00      	nop
      }
      break;
 800503a:	e004      	b.n	8005046 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fd11 	bl	8005a66 <USBD_CtlError>
      break;
 8005044:	bf00      	nop
  }

  return ret;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	889b      	ldrh	r3, [r3, #4]
 8005062:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d007      	beq.n	8005080 <USBD_StdEPReq+0x30>
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	f200 817f 	bhi.w	8005374 <USBD_StdEPReq+0x324>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02a      	beq.n	80050d0 <USBD_StdEPReq+0x80>
 800507a:	2b20      	cmp	r3, #32
 800507c:	f040 817a 	bne.w	8005374 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff febd 	bl	8004e04 <USBD_CoreFindEP>
 800508a:	4603      	mov	r3, r0
 800508c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800508e:	7b7b      	ldrb	r3, [r7, #13]
 8005090:	2bff      	cmp	r3, #255	@ 0xff
 8005092:	f000 8174 	beq.w	800537e <USBD_StdEPReq+0x32e>
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 8170 	bne.w	800537e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800509e:	7b7a      	ldrb	r2, [r7, #13]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80050a6:	7b7a      	ldrb	r2, [r7, #13]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	32ae      	adds	r2, #174	@ 0xae
 80050ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8163 	beq.w	800537e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80050b8:	7b7a      	ldrb	r2, [r7, #13]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	32ae      	adds	r2, #174	@ 0xae
 80050be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ce:	e156      	b.n	800537e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d008      	beq.n	80050ea <USBD_StdEPReq+0x9a>
 80050d8:	2b03      	cmp	r3, #3
 80050da:	f300 8145 	bgt.w	8005368 <USBD_StdEPReq+0x318>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 809b 	beq.w	800521a <USBD_StdEPReq+0x1ca>
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d03c      	beq.n	8005162 <USBD_StdEPReq+0x112>
 80050e8:	e13e      	b.n	8005368 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d002      	beq.n	80050fc <USBD_StdEPReq+0xac>
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d016      	beq.n	8005128 <USBD_StdEPReq+0xd8>
 80050fa:	e02c      	b.n	8005156 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <USBD_StdEPReq+0xce>
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d00a      	beq.n	800511e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f002 f925 	bl	800735c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005112:	2180      	movs	r1, #128	@ 0x80
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f002 f921 	bl	800735c <USBD_LL_StallEP>
 800511a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800511c:	e020      	b.n	8005160 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fca0 	bl	8005a66 <USBD_CtlError>
              break;
 8005126:	e01b      	b.n	8005160 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	885b      	ldrh	r3, [r3, #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10e      	bne.n	800514e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <USBD_StdEPReq+0xfe>
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d008      	beq.n	800514e <USBD_StdEPReq+0xfe>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	88db      	ldrh	r3, [r3, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 f907 	bl	800735c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fcd8 	bl	8006b04 <USBD_CtlSendStatus>

              break;
 8005154:	e004      	b.n	8005160 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fc84 	bl	8005a66 <USBD_CtlError>
              break;
 800515e:	bf00      	nop
          }
          break;
 8005160:	e107      	b.n	8005372 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d002      	beq.n	8005174 <USBD_StdEPReq+0x124>
 800516e:	2b03      	cmp	r3, #3
 8005170:	d016      	beq.n	80051a0 <USBD_StdEPReq+0x150>
 8005172:	e04b      	b.n	800520c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <USBD_StdEPReq+0x146>
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	2b80      	cmp	r3, #128	@ 0x80
 800517e:	d00a      	beq.n	8005196 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f002 f8e9 	bl	800735c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f002 f8e5 	bl	800735c <USBD_LL_StallEP>
 8005192:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005194:	e040      	b.n	8005218 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fc64 	bl	8005a66 <USBD_CtlError>
              break;
 800519e:	e03b      	b.n	8005218 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	885b      	ldrh	r3, [r3, #2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d136      	bne.n	8005216 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f002 f8ef 	bl	800739a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fca1 	bl	8006b04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fe1c 	bl	8004e04 <USBD_CoreFindEP>
 80051cc:	4603      	mov	r3, r0
 80051ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051d0:	7b7b      	ldrb	r3, [r7, #13]
 80051d2:	2bff      	cmp	r3, #255	@ 0xff
 80051d4:	d01f      	beq.n	8005216 <USBD_StdEPReq+0x1c6>
 80051d6:	7b7b      	ldrb	r3, [r7, #13]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d11c      	bne.n	8005216 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80051dc:	7b7a      	ldrb	r2, [r7, #13]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80051e4:	7b7a      	ldrb	r2, [r7, #13]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	32ae      	adds	r2, #174	@ 0xae
 80051ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80051f4:	7b7a      	ldrb	r2, [r7, #13]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	32ae      	adds	r2, #174	@ 0xae
 80051fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800520a:	e004      	b.n	8005216 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fc29 	bl	8005a66 <USBD_CtlError>
              break;
 8005214:	e000      	b.n	8005218 <USBD_StdEPReq+0x1c8>
              break;
 8005216:	bf00      	nop
          }
          break;
 8005218:	e0ab      	b.n	8005372 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d002      	beq.n	800522c <USBD_StdEPReq+0x1dc>
 8005226:	2b03      	cmp	r3, #3
 8005228:	d032      	beq.n	8005290 <USBD_StdEPReq+0x240>
 800522a:	e097      	b.n	800535c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <USBD_StdEPReq+0x1f2>
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d004      	beq.n	8005242 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fc13 	bl	8005a66 <USBD_CtlError>
                break;
 8005240:	e091      	b.n	8005366 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005246:	2b00      	cmp	r3, #0
 8005248:	da0b      	bge.n	8005262 <USBD_StdEPReq+0x212>
 800524a:	7bbb      	ldrb	r3, [r7, #14]
 800524c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	3310      	adds	r3, #16
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	3304      	adds	r3, #4
 8005260:	e00b      	b.n	800527a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	3304      	adds	r3, #4
 800527a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2202      	movs	r2, #2
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fbe1 	bl	8006a50 <USBD_CtlSendData>
              break;
 800528e:	e06a      	b.n	8005366 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005294:	2b00      	cmp	r3, #0
 8005296:	da11      	bge.n	80052bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3324      	adds	r3, #36	@ 0x24
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d117      	bne.n	80052e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fbd6 	bl	8005a66 <USBD_CtlError>
                  break;
 80052ba:	e054      	b.n	8005366 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fbc3 	bl	8005a66 <USBD_CtlError>
                  break;
 80052e0:	e041      	b.n	8005366 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da0b      	bge.n	8005302 <USBD_StdEPReq+0x2b2>
 80052ea:	7bbb      	ldrb	r3, [r7, #14]
 80052ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	3310      	adds	r3, #16
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	3304      	adds	r3, #4
 8005300:	e00b      	b.n	800531a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4413      	add	r3, r2
 8005318:	3304      	adds	r3, #4
 800531a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <USBD_StdEPReq+0x2d8>
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	2b80      	cmp	r3, #128	@ 0x80
 8005326:	d103      	bne.n	8005330 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e00e      	b.n	800534e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f002 f84f 	bl	80073d8 <USBD_LL_IsStallEP>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e002      	b.n	800534e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2202      	movs	r2, #2
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 fb7b 	bl	8006a50 <USBD_CtlSendData>
              break;
 800535a:	e004      	b.n	8005366 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb81 	bl	8005a66 <USBD_CtlError>
              break;
 8005364:	bf00      	nop
          }
          break;
 8005366:	e004      	b.n	8005372 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb7b 	bl	8005a66 <USBD_CtlError>
          break;
 8005370:	bf00      	nop
      }
      break;
 8005372:	e005      	b.n	8005380 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb75 	bl	8005a66 <USBD_CtlError>
      break;
 800537c:	e000      	b.n	8005380 <USBD_StdEPReq+0x330>
      break;
 800537e:	bf00      	nop
  }

  return ret;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	885b      	ldrh	r3, [r3, #2]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	f200 814f 	bhi.w	8005650 <USBD_GetDescriptor+0x2c4>
 80053b2:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <USBD_GetDescriptor+0x2c>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053ed 	.word	0x080053ed
 80053c0:	0800542d 	.word	0x0800542d
 80053c4:	08005651 	.word	0x08005651
 80053c8:	08005651 	.word	0x08005651
 80053cc:	080055f1 	.word	0x080055f1
 80053d0:	0800561d 	.word	0x0800561d
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	7c12      	ldrb	r2, [r2, #16]
 80053e0:	f107 010a 	add.w	r1, r7, #10
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	6178      	str	r0, [r7, #20]
      break;
 80053ea:	e139      	b.n	8005660 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7c1b      	ldrb	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	f107 020a 	add.w	r2, r7, #10
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
 8005404:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	2202      	movs	r2, #2
 800540c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800540e:	e127      	b.n	8005660 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f107 020a 	add.w	r2, r7, #10
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
 8005420:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	2202      	movs	r2, #2
 8005428:	701a      	strb	r2, [r3, #0]
      break;
 800542a:	e119      	b.n	8005660 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	885b      	ldrh	r3, [r3, #2]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	f200 80ac 	bhi.w	8005590 <USBD_GetDescriptor+0x204>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <USBD_GetDescriptor+0xb4>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005459 	.word	0x08005459
 8005444:	0800548d 	.word	0x0800548d
 8005448:	080054c1 	.word	0x080054c1
 800544c:	080054f5 	.word	0x080054f5
 8005450:	08005529 	.word	0x08005529
 8005454:	0800555d 	.word	0x0800555d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	7c12      	ldrb	r2, [r2, #16]
 8005470:	f107 010a 	add.w	r1, r7, #10
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
 8005478:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800547a:	e0b8      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 faf1 	bl	8005a66 <USBD_CtlError>
            err++;
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	3301      	adds	r3, #1
 8005488:	74fb      	strb	r3, [r7, #19]
          break;
 800548a:	e0b0      	b.n	80055ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	7c12      	ldrb	r2, [r2, #16]
 80054a4:	f107 010a 	add.w	r1, r7, #10
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
 80054ac:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ae:	e09e      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fad7 	bl	8005a66 <USBD_CtlError>
            err++;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	3301      	adds	r3, #1
 80054bc:	74fb      	strb	r3, [r7, #19]
          break;
 80054be:	e096      	b.n	80055ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	7c12      	ldrb	r2, [r2, #16]
 80054d8:	f107 010a 	add.w	r1, r7, #10
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
 80054e0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054e2:	e084      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fabd 	bl	8005a66 <USBD_CtlError>
            err++;
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	3301      	adds	r3, #1
 80054f0:	74fb      	strb	r3, [r7, #19]
          break;
 80054f2:	e07c      	b.n	80055ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	7c12      	ldrb	r2, [r2, #16]
 800550c:	f107 010a 	add.w	r1, r7, #10
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
 8005514:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005516:	e06a      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 faa3 	bl	8005a66 <USBD_CtlError>
            err++;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	3301      	adds	r3, #1
 8005524:	74fb      	strb	r3, [r7, #19]
          break;
 8005526:	e062      	b.n	80055ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	7c12      	ldrb	r2, [r2, #16]
 8005540:	f107 010a 	add.w	r1, r7, #10
 8005544:	4610      	mov	r0, r2
 8005546:	4798      	blx	r3
 8005548:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800554a:	e050      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa89 	bl	8005a66 <USBD_CtlError>
            err++;
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	3301      	adds	r3, #1
 8005558:	74fb      	strb	r3, [r7, #19]
          break;
 800555a:	e048      	b.n	80055ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	7c12      	ldrb	r2, [r2, #16]
 8005574:	f107 010a 	add.w	r1, r7, #10
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
 800557c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800557e:	e036      	b.n	80055ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa6f 	bl	8005a66 <USBD_CtlError>
            err++;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	3301      	adds	r3, #1
 800558c:	74fb      	strb	r3, [r7, #19]
          break;
 800558e:	e02e      	b.n	80055ee <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e020      	b.n	80055dc <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	32ae      	adds	r2, #174	@ 0xae
 80055a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	32ae      	adds	r2, #174	@ 0xae
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	8852      	ldrh	r2, [r2, #2]
 80055c2:	b2d1      	uxtb	r1, r2
 80055c4:	f107 020a 	add.w	r2, r7, #10
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <USBD_GetDescriptor+0x25e>
              {
                continue;
 80055d4:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3d8      	bcc.n	800559a <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80055e8:	e000      	b.n	80055ec <USBD_GetDescriptor+0x260>
                break;
 80055ea:	bf00      	nop
          break;
 80055ec:	bf00      	nop
      }
      break;
 80055ee:	e037      	b.n	8005660 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	7c1b      	ldrb	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005600:	f107 020a 	add.w	r2, r7, #10
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
 8005608:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800560a:	e029      	b.n	8005660 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa29 	bl	8005a66 <USBD_CtlError>
        err++;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	3301      	adds	r3, #1
 8005618:	74fb      	strb	r3, [r7, #19]
      break;
 800561a:	e021      	b.n	8005660 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7c1b      	ldrb	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10d      	bne.n	8005640 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	f107 020a 	add.w	r2, r7, #10
 8005630:	4610      	mov	r0, r2
 8005632:	4798      	blx	r3
 8005634:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3301      	adds	r3, #1
 800563a:	2207      	movs	r2, #7
 800563c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800563e:	e00f      	b.n	8005660 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa0f 	bl	8005a66 <USBD_CtlError>
        err++;
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	3301      	adds	r3, #1
 800564c:	74fb      	strb	r3, [r7, #19]
      break;
 800564e:	e007      	b.n	8005660 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa07 	bl	8005a66 <USBD_CtlError>
      err++;
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	3301      	adds	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	bf00      	nop
  }

  if (err != 0U)
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11e      	bne.n	80056a4 <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	88db      	ldrh	r3, [r3, #6]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 800566e:	897b      	ldrh	r3, [r7, #10]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	88da      	ldrh	r2, [r3, #6]
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	4293      	cmp	r3, r2
 800567c:	bf28      	it	cs
 800567e:	4613      	movcs	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005684:	897b      	ldrh	r3, [r7, #10]
 8005686:	461a      	mov	r2, r3
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 f9e0 	bl	8006a50 <USBD_CtlSendData>
 8005690:	e009      	b.n	80056a6 <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f9e6 	bl	8005a66 <USBD_CtlError>
 800569a:	e004      	b.n	80056a6 <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fa31 	bl	8006b04 <USBD_CtlSendStatus>
 80056a2:	e000      	b.n	80056a6 <USBD_GetDescriptor+0x31a>
    return;
 80056a4:	bf00      	nop
  }
}
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	889b      	ldrh	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d131      	bne.n	8005722 <USBD_SetAddress+0x76>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	88db      	ldrh	r3, [r3, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d12d      	bne.n	8005722 <USBD_SetAddress+0x76>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	885b      	ldrh	r3, [r3, #2]
 80056ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80056cc:	d829      	bhi.n	8005722 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	885b      	ldrh	r3, [r3, #2]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d104      	bne.n	80056f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f9bc 	bl	8005a66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ee:	e01d      	b.n	800572c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fe97 	bl	8007430 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f001 f9fe 	bl	8006b04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005716:	e009      	b.n	800572c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005720:	e004      	b.n	800572c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f99e 	bl	8005a66 <USBD_CtlError>
  }
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	885b      	ldrh	r3, [r3, #2]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b4e      	ldr	r3, [pc, #312]	@ (8005884 <USBD_SetConfig+0x150>)
 800574a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800574c:	4b4d      	ldr	r3, [pc, #308]	@ (8005884 <USBD_SetConfig+0x150>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d905      	bls.n	8005760 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f985 	bl	8005a66 <USBD_CtlError>
    return USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e08c      	b.n	800587a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d002      	beq.n	8005772 <USBD_SetConfig+0x3e>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d029      	beq.n	80057c4 <USBD_SetConfig+0x90>
 8005770:	e075      	b.n	800585e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005772:	4b44      	ldr	r3, [pc, #272]	@ (8005884 <USBD_SetConfig+0x150>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800577a:	4b42      	ldr	r3, [pc, #264]	@ (8005884 <USBD_SetConfig+0x150>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005784:	4b3f      	ldr	r3, [pc, #252]	@ (8005884 <USBD_SetConfig+0x150>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fe fff5 	bl	800477a <USBD_SetClassConfig>
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f962 	bl	8005a66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057aa:	e065      	b.n	8005878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f9a9 	bl	8006b04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80057ba:	e05d      	b.n	8005878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f9a1 	bl	8006b04 <USBD_CtlSendStatus>
      break;
 80057c2:	e059      	b.n	8005878 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80057c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005884 <USBD_SetConfig+0x150>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d112      	bne.n	80057f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80057d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005884 <USBD_SetConfig+0x150>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80057de:	4b29      	ldr	r3, [pc, #164]	@ (8005884 <USBD_SetConfig+0x150>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fe ffe4 	bl	80047b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f98a 	bl	8006b04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057f0:	e042      	b.n	8005878 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80057f2:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <USBD_SetConfig+0x150>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d02a      	beq.n	8005856 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fe ffd2 	bl	80047b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800580e:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <USBD_SetConfig+0x150>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005818:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <USBD_SetConfig+0x150>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fe ffab 	bl	800477a <USBD_SetClassConfig>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00f      	beq.n	800584e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f918 	bl	8005a66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fe ffb7 	bl	80047b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800584c:	e014      	b.n	8005878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 f958 	bl	8006b04 <USBD_CtlSendStatus>
      break;
 8005854:	e010      	b.n	8005878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 f954 	bl	8006b04 <USBD_CtlSendStatus>
      break;
 800585c:	e00c      	b.n	8005878 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f900 	bl	8005a66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005866:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <USBD_SetConfig+0x150>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fe ffa0 	bl	80047b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005872:	2303      	movs	r3, #3
 8005874:	73fb      	strb	r3, [r7, #15]
      break;
 8005876:	bf00      	nop
  }

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000124 	.word	0x20000124

08005888 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d004      	beq.n	80058a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f8e2 	bl	8005a66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80058a2:	e023      	b.n	80058ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	dc02      	bgt.n	80058b6 <USBD_GetConfig+0x2e>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc03      	bgt.n	80058bc <USBD_GetConfig+0x34>
 80058b4:	e015      	b.n	80058e2 <USBD_GetConfig+0x5a>
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d00b      	beq.n	80058d2 <USBD_GetConfig+0x4a>
 80058ba:	e012      	b.n	80058e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3308      	adds	r3, #8
 80058c6:	2201      	movs	r2, #1
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 f8c0 	bl	8006a50 <USBD_CtlSendData>
        break;
 80058d0:	e00c      	b.n	80058ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	2201      	movs	r2, #1
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 f8b8 	bl	8006a50 <USBD_CtlSendData>
        break;
 80058e0:	e004      	b.n	80058ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f8be 	bl	8005a66 <USBD_CtlError>
        break;
 80058ea:	bf00      	nop
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	2b02      	cmp	r3, #2
 800590a:	d81e      	bhi.n	800594a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	88db      	ldrh	r3, [r3, #6]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d004      	beq.n	800591e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8a5 	bl	8005a66 <USBD_CtlError>
        break;
 800591c:	e01a      	b.n	8005954 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f043 0202 	orr.w	r2, r3, #2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	330c      	adds	r3, #12
 800593e:	2202      	movs	r2, #2
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f884 	bl	8006a50 <USBD_CtlSendData>
      break;
 8005948:	e004      	b.n	8005954 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f88a 	bl	8005a66 <USBD_CtlError>
      break;
 8005952:	bf00      	nop
  }
}
 8005954:	bf00      	nop
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	885b      	ldrh	r3, [r3, #2]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 f8c4 	bl	8006b04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800597c:	e013      	b.n	80059a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d10b      	bne.n	800599e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	889b      	ldrh	r3, [r3, #4]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	b29b      	uxth	r3, r3
 800598e:	b2da      	uxtb	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f8b4 	bl	8006b04 <USBD_CtlSendStatus>
}
 800599c:	e003      	b.n	80059a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f860 	bl	8005a66 <USBD_CtlError>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d80b      	bhi.n	80059de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	885b      	ldrh	r3, [r3, #2]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d10c      	bne.n	80059e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 f894 	bl	8006b04 <USBD_CtlSendStatus>
      }
      break;
 80059dc:	e004      	b.n	80059e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f840 	bl	8005a66 <USBD_CtlError>
      break;
 80059e6:	e000      	b.n	80059ea <USBD_ClrFeature+0x3c>
      break;
 80059e8:	bf00      	nop
  }
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fa1a 	bl	8004e56 <SWAPBYTE>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fa0d 	bl	8004e56 <SWAPBYTE>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fa00 	bl	8004e56 <SWAPBYTE>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	80da      	strh	r2, [r3, #6]
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a70:	2180      	movs	r1, #128	@ 0x80
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fc72 	bl	800735c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fc6e 	bl	800735c <USBD_LL_StallEP>
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d042      	beq.n	8005b24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005aa2:	6938      	ldr	r0, [r7, #16]
 8005aa4:	f000 f842 	bl	8005b2c <USBD_GetLen>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	3301      	adds	r3, #1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab2:	d808      	bhi.n	8005ac6 <USBD_GetString+0x3e>
 8005ab4:	6938      	ldr	r0, [r7, #16]
 8005ab6:	f000 f839 	bl	8005b2c <USBD_GetLen>
 8005aba:	4603      	mov	r3, r0
 8005abc:	3301      	adds	r3, #1
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	e001      	b.n	8005aca <USBD_GetString+0x42>
 8005ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	3301      	adds	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	3301      	adds	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005af0:	e013      	b.n	8005b1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4413      	add	r3, r2
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3301      	adds	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
    idx++;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	3301      	adds	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4413      	add	r3, r2
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
    idx++;
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	3301      	adds	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e7      	bne.n	8005af2 <USBD_GetString+0x6a>
 8005b22:	e000      	b.n	8005b26 <USBD_GetString+0x9e>
    return;
 8005b24:	bf00      	nop
  }
}
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005b3c:	e005      	b.n	8005b4a <USBD_GetLen+0x1e>
  {
    len++;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	3301      	adds	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f5      	bne.n	8005b3e <USBD_GetLen+0x12>
  }

  return len;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <__NVIC_SystemReset>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005b64:	f3bf 8f4f 	dsb	sy
}
 8005b68:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <__NVIC_SystemReset+0x24>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005b72:	4904      	ldr	r1, [pc, #16]	@ (8005b84 <__NVIC_SystemReset+0x24>)
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <__NVIC_SystemReset+0x28>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b7a:	f3bf 8f4f 	dsb	sy
}
 8005b7e:	bf00      	nop
    __NOP();
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <__NVIC_SystemReset+0x20>
 8005b84:	e000ed00 	.word	0xe000ed00
 8005b88:	05fa0004 	.word	0x05fa0004

08005b8c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005b98:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8005b9c:	f001 fcaa 	bl	80074f4 <USBD_static_malloc>
 8005ba0:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32b0      	adds	r2, #176	@ 0xb0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e052      	b.n	8005c62 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	32b0      	adds	r2, #176	@ 0xb0
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	32b0      	adds	r2, #176	@ 0xb0
 8005bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005bee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	33b0      	adds	r3, #176	@ 0xb0
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4798      	blx	r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	32b0      	adds	r2, #176	@ 0xb0
 8005c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e03c      	b.n	8005d06 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32b0      	adds	r2, #176	@ 0xb0
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	33b0      	adds	r3, #176	@ 0xb0
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	@ 0xb0
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fc12 	bl	8007510 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	32b0      	adds	r2, #176	@ 0xb0
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	32b0      	adds	r2, #176	@ 0xb0
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e0e8      	b.n	8005f0e <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d03e      	beq.n	8005dc6 <USBD_DFU_Setup+0xb6>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	f040 80d8 	bne.w	8005efe <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d82f      	bhi.n	8005db6 <USBD_DFU_Setup+0xa6>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <USBD_DFU_Setup+0x4c>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d83 	.word	0x08005d83
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	08005da5 	.word	0x08005da5
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fac2 	bl	8006304 <DFU_Download>
          break;
 8005d80:	e020      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb33 	bl	80063f0 <DFU_Upload>
          break;
 8005d8a:	e01b      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fc37 	bl	8006600 <DFU_GetStatus>
          break;
 8005d92:	e017      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fcff 	bl	8006798 <DFU_ClearStatus>
          break;
 8005d9a:	e013      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fd53 	bl	8006848 <DFU_GetState>
          break;
 8005da2:	e00f      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fd6b 	bl	8006880 <DFU_Abort>
          break;
 8005daa:	e00b      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa38 	bl	8006224 <DFU_Detach>
          break;
 8005db4:	e006      	b.n	8005dc4 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fe54 	bl	8005a66 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc2:	bf00      	nop
      }
      break;
 8005dc4:	e0a2      	b.n	8005f0c <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b0b      	cmp	r3, #11
 8005dcc:	f200 808c 	bhi.w	8005ee8 <USBD_DFU_Setup+0x1d8>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <USBD_DFU_Setup+0xc8>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005ef7 	.word	0x08005ef7
 8005de0:	08005ee9 	.word	0x08005ee9
 8005de4:	08005ee9 	.word	0x08005ee9
 8005de8:	08005ee9 	.word	0x08005ee9
 8005dec:	08005ee9 	.word	0x08005ee9
 8005df0:	08005e33 	.word	0x08005e33
 8005df4:	08005ee9 	.word	0x08005ee9
 8005df8:	08005ee9 	.word	0x08005ee9
 8005dfc:	08005ee9 	.word	0x08005ee9
 8005e00:	08005e7b 	.word	0x08005e7b
 8005e04:	08005ea7 	.word	0x08005ea7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d107      	bne.n	8005e24 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	2202      	movs	r2, #2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fe17 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e22:	e06b      	b.n	8005efc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe1d 	bl	8005a66 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e30:	e064      	b.n	8005efc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	885b      	ldrh	r3, [r3, #2]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b21      	cmp	r3, #33	@ 0x21
 8005e3c:	d15d      	bne.n	8005efa <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fdd5 	bl	80069f4 <USBD_DFU_GetDfuFuncDesc>
 8005e4a:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88db      	ldrh	r3, [r3, #6]
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	bf28      	it	cs
 8005e5a:	2309      	movcs	r3, #9
 8005e5c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fdf3 	bl	8006a50 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8005e6a:	e046      	b.n	8005efa <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fdf9 	bl	8005a66 <USBD_CtlError>
              ret = USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	75fb      	strb	r3, [r7, #23]
          break;
 8005e78:	e03f      	b.n	8005efa <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d108      	bne.n	8005e98 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fddd 	bl	8006a50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e96:	e031      	b.n	8005efc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fde3 	bl	8005a66 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea4:	e02a      	b.n	8005efc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	885b      	ldrh	r3, [r3, #2]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d114      	bne.n	8005eda <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d107      	bne.n	8005ecc <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	885b      	ldrh	r3, [r3, #2]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eca:	e017      	b.n	8005efc <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fdc9 	bl	8005a66 <USBD_CtlError>
              ret = USBD_FAIL;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed8:	e010      	b.n	8005efc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fdc2 	bl	8005a66 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e009      	b.n	8005efc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fdbb 	bl	8005a66 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef4:	e002      	b.n	8005efc <USBD_DFU_Setup+0x1ec>
          break;
 8005ef6:	bf00      	nop
 8005ef8:	e008      	b.n	8005f0c <USBD_DFU_Setup+0x1fc>
          break;
 8005efa:	bf00      	nop
      }
      break;
 8005efc:	e006      	b.n	8005f0c <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fdb0 	bl	8005a66 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f06:	2303      	movs	r3, #3
 8005f08:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	221b      	movs	r2, #27
 8005f24:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8005f26:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000048 	.word	0x20000048

08005f38 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b088      	sub	sp, #32
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32b0      	adds	r2, #176	@ 0xb0
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	33b0      	adds	r3, #176	@ 0xb0
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0f1      	b.n	8006166 <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	f040 80e0 	bne.w	800614e <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 8085 	bne.w	80060a4 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	f000 80b5 	beq.w	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005fac:	2b05      	cmp	r3, #5
 8005fae:	d166      	bne.n	800607e <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b21      	cmp	r3, #33	@ 0x21
 8005fb6:	d124      	bne.n	8006002 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	789b      	ldrb	r3, [r3, #2]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	441a      	add	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	78db      	ldrb	r3, [r3, #3]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	441a      	add	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	061b      	lsls	r3, r3, #24
 8005ff8:	441a      	add	r2, r3
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8006000:	e086      	b.n	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b41      	cmp	r3, #65	@ 0x41
 8006008:	d137      	bne.n	800607a <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	789b      	ldrb	r3, [r3, #2]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4413      	add	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	791b      	ldrb	r3, [r3, #4]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	6938      	ldr	r0, [r7, #16]
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d066      	beq.n	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	220a      	movs	r2, #10
 8006046:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	220b      	movs	r2, #11
 800604e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8006076:	2303      	movs	r3, #3
 8006078:	e075      	b.n	8006166 <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	e073      	b.n	8006166 <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8006092:	2301      	movs	r3, #1
 8006094:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8006096:	f107 0308 	add.w	r3, r7, #8
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fce2 	bl	8005a66 <USBD_CtlError>
 80060a2:	e035      	b.n	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d930      	bls.n	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80060b4:	3b02      	subs	r3, #2
 80060b6:	029a      	lsls	r2, r3, #10
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80060be:	4413      	add	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	69f8      	ldr	r0, [r7, #28]
 80060c8:	6979      	ldr	r1, [r7, #20]
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01b      	beq.n	8006110 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	220a      	movs	r2, #10
 80060dc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	220b      	movs	r2, #11
 80060e4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	e02a      	b.n	8006166 <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2203      	movs	r2, #3
 8006124:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800614c:	e00a      	b.n	8006164 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8006154:	2b07      	cmp	r3, #7
 8006156:	d103      	bne.n	8006160 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fbe6 	bl	800692a <DFU_Leave>
 800615e:	e001      	b.n	8006164 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8006160:	2303      	movs	r3, #3
 8006162:	e000      	b.n	8006166 <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	220a      	movs	r2, #10
 8006190:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8006192:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000064 	.word	0x20000064

080061a4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	460b      	mov	r3, r1
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	33b0      	adds	r3, #176	@ 0xb0
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	2b06      	cmp	r3, #6
 80061c8:	d808      	bhi.n	80061dc <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4906      	ldr	r1, [pc, #24]	@ (80061ec <USBD_DFU_GetUsrStringDesc+0x48>)
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fc58 	bl	8005a88 <USBD_GetString>
    return USBD_StrDesc;
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <USBD_DFU_GetUsrStringDesc+0x48>)
 80061da:	e003      	b.n	80061e4 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	801a      	strh	r2, [r3, #0]
    return NULL;
 80061e2:	2300      	movs	r3, #0
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000128 	.word	0x20000128

080061f0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006200:	2303      	movs	r3, #3
 8006202:	e009      	b.n	8006218 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	33b0      	adds	r3, #176	@ 0xb0
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	32b0      	adds	r2, #176	@ 0xb0
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fbd5 	bl	80069f4 <USBD_DFU_GetDfuFuncDesc>
 800624a:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d054      	beq.n	80062fc <DFU_Detach+0xd8>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d051      	beq.n	80062fc <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800625e:	2b02      	cmp	r3, #2
 8006260:	d013      	beq.n	800628a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006268:	2b03      	cmp	r3, #3
 800626a:	d00e      	beq.n	800628a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006272:	2b05      	cmp	r3, #5
 8006274:	d009      	beq.n	800628a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800627c:	2b06      	cmp	r3, #6
 800627e:	d004      	beq.n	800628a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006286:	2b09      	cmp	r3, #9
 8006288:	d125      	bne.n	80062d6 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	789b      	ldrb	r3, [r3, #2]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d006      	beq.n	80062f0 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fe fa23 	bl	800472e <USBD_Stop>
    (void)USBD_Start(pdev);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fe fa14 	bl	8004716 <USBD_Start>
 80062ee:	e006      	b.n	80062fe <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	885b      	ldrh	r3, [r3, #2]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fa fb07 	bl	8000908 <HAL_Delay>
 80062fa:	e000      	b.n	80062fe <DFU_Detach+0xda>
    return;
 80062fc:	bf00      	nop
  }
}
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	32b0      	adds	r2, #176	@ 0xb0
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d061      	beq.n	80063e8 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	88db      	ldrh	r3, [r3, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d033      	beq.n	8006394 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8006332:	2b02      	cmp	r3, #2
 8006334:	d004      	beq.n	8006340 <DFU_Download+0x3c>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800633c:	2b05      	cmp	r3, #5
 800633e:	d124      	bne.n	800638a <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	885b      	ldrh	r3, [r3, #2]
 8006344:	461a      	mov	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	88db      	ldrh	r3, [r3, #6]
 8006350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006354:	bf28      	it	cs
 8006356:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2203      	movs	r2, #3
 8006368:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006380:	461a      	mov	r2, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb90 	bl	8006aa8 <USBD_CtlPrepareRx>
 8006388:	e02f      	b.n	80063ea <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fb6a 	bl	8005a66 <USBD_CtlError>
 8006392:	e02a      	b.n	80063ea <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800639a:	2b05      	cmp	r3, #5
 800639c:	d004      	beq.n	80063a8 <DFU_Download+0xa4>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d11a      	bne.n	80063de <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2206      	movs	r2, #6
 80063b4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80063dc:	e005      	b.n	80063ea <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fb40 	bl	8005a66 <USBD_CtlError>
 80063e6:	e000      	b.n	80063ea <DFU_Download+0xe6>
    return;
 80063e8:	bf00      	nop
    }
  }
}
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	32b0      	adds	r2, #176	@ 0xb0
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	33b0      	adds	r3, #176	@ 0xb0
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80ea 	beq.w	80065f8 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	88db      	ldrh	r3, [r3, #6]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ce 	beq.w	80065ca <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8006434:	2b02      	cmp	r3, #2
 8006436:	d005      	beq.n	8006444 <DFU_Upload+0x54>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800643e:	2b09      	cmp	r3, #9
 8006440:	f040 80b6 	bne.w	80065b0 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	885b      	ldrh	r3, [r3, #2]
 8006448:	461a      	mov	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006458:	bf28      	it	cs
 800645a:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800646e:	2b00      	cmp	r3, #0
 8006470:	d12e      	bne.n	80064d0 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006478:	2b03      	cmp	r3, #3
 800647a:	d901      	bls.n	8006480 <DFU_Upload+0x90>
 800647c:	2202      	movs	r2, #2
 800647e:	e000      	b.n	8006482 <DFU_Upload+0x92>
 8006480:	2209      	movs	r2, #9
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2221      	movs	r2, #33	@ 0x21
 80064b6:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	2241      	movs	r2, #65	@ 0x41
 80064bc:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 80064be:	2303      	movs	r3, #3
 80064c0:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fac1 	bl	8006a50 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80064ce:	e094      	b.n	80065fa <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d94f      	bls.n	800657a <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2209      	movs	r2, #9
 80064de:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800650c:	3b02      	subs	r3, #2
 800650e:	029a      	lsls	r2, r3, #10
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006516:	4413      	add	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	6978      	ldr	r0, [r7, #20]
 8006520:	69f9      	ldr	r1, [r7, #28]
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8006528:	4798      	blx	r3
 800652a:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11a      	bne.n	8006568 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	220f      	movs	r2, #15
 8006536:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff fa80 	bl	8005a66 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8006566:	e048      	b.n	80065fa <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800656e:	461a      	mov	r2, r3
 8006570:	6939      	ldr	r1, [r7, #16]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa6c 	bl	8006a50 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006578:	e03f      	b.n	80065fa <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	220f      	movs	r2, #15
 800657e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fa5c 	bl	8005a66 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80065ae:	e024      	b.n	80065fa <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fa4f 	bl	8005a66 <USBD_CtlError>
 80065c8:	e017      	b.n	80065fa <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80065f6:	e000      	b.n	80065fa <DFU_Upload+0x20a>
    return;
 80065f8:	bf00      	nop
  }
}
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	32b0      	adds	r2, #176	@ 0xb0
 8006612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006616:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	33b0      	adds	r3, #176	@ 0xb0
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f9df 	bl	80069f4 <USBD_DFU_GetDfuFuncDesc>
 8006636:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80a8 	beq.w	8006790 <DFU_GetStatus+0x190>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80a4 	beq.w	8006790 <DFU_GetStatus+0x190>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a0 	beq.w	8006790 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8006656:	2b03      	cmp	r3, #3
 8006658:	d002      	beq.n	8006660 <DFU_GetStatus+0x60>
 800665a:	2b06      	cmp	r3, #6
 800665c:	d051      	beq.n	8006702 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800665e:	e08e      	b.n	800677e <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006666:	2b00      	cmp	r3, #0
 8006668:	d034      	beq.n	80066d4 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2204      	movs	r2, #4
 800666e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <DFU_GetStatus+0xbe>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b41      	cmp	r3, #65	@ 0x41
 80066a6:	d10a      	bne.n	80066be <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 80066b8:	2100      	movs	r1, #0
 80066ba:	4798      	blx	r3
      break;
 80066bc:	e05f      	b.n	800677e <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 80066ce:	2101      	movs	r1, #1
 80066d0:	4798      	blx	r3
      break;
 80066d2:	e054      	b.n	800677e <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2205      	movs	r2, #5
 80066d8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8006700:	e03d      	b.n	800677e <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8006708:	2b01      	cmp	r3, #1
 800670a:	d116      	bne.n	800673a <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2207      	movs	r2, #7
 8006710:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8006738:	e020      	b.n	800677c <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8006740:	2b00      	cmp	r3, #0
 8006742:	d11b      	bne.n	800677c <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	789b      	ldrb	r3, [r3, #2]
 8006748:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800674c:	2b00      	cmp	r3, #0
 800674e:	d015      	beq.n	800677c <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 800677c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8006784:	2206      	movs	r2, #6
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f961 	bl	8006a50 <USBD_CtlSendData>
 800678e:	e000      	b.n	8006792 <DFU_GetStatus+0x192>
    return;
 8006790:	bf00      	nop
}
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32b0      	adds	r2, #176	@ 0xb0
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d042      	beq.n	800683c <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80067bc:	2b0a      	cmp	r3, #10
 80067be:	d11e      	bne.n	80067fe <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 80067fc:	e01f      	b.n	800683e <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	220a      	movs	r2, #10
 8006802:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	220e      	movs	r2, #14
 800680a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800683a:	e000      	b.n	800683e <DFU_ClearStatus+0xa6>
    return;
 800683c:	bf00      	nop
  }
}
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32b0      	adds	r2, #176	@ 0xb0
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800686c:	2201      	movs	r2, #1
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f8ed 	bl	8006a50 <USBD_CtlSendData>
 8006876:	e000      	b.n	800687a <DFU_GetState+0x32>
    return;
 8006878:	bf00      	nop
}
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32b0      	adds	r2, #176	@ 0xb0
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d03f      	beq.n	800691e <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d013      	beq.n	80068d0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d00e      	beq.n	80068d0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d009      	beq.n	80068d0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d004      	beq.n	80068d0 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d127      	bne.n	8006920 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800691c:	e000      	b.n	8006920 <DFU_Abort+0xa0>
    return;
 800691e:	bf00      	nop
  }
}
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	32b0      	adds	r2, #176	@ 0xb0
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	33b0      	adds	r3, #176	@ 0xb0
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f84a 	bl	80069f4 <USBD_DFU_GetDfuFuncDesc>
 8006960:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d041      	beq.n	80069ec <DFU_Leave+0xc2>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03e      	beq.n	80069ec <DFU_Leave+0xc2>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d03b      	beq.n	80069ec <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	789b      	ldrb	r3, [r3, #2]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2206      	movs	r2, #6
 800698c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 80069b4:	e01b      	b.n	80069ee <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2208      	movs	r2, #8
 80069ba:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fd fea3 	bl	800472e <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80069e8:	f7ff f8ba 	bl	8005b60 <__NVIC_SystemReset>
    return;
 80069ec:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d917      	bls.n	8006a46 <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a1c:	e00d      	b.n	8006a3a <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a1e:	f107 030a 	add.w	r3, r7, #10
 8006a22:	4619      	mov	r1, r3
 8006a24:	6978      	ldr	r0, [r7, #20]
 8006a26:	f7fe f9fa 	bl	8004e1e <USBD_GetNextDesc>
 8006a2a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b21      	cmp	r3, #33	@ 0x21
 8006a32:	d102      	bne.n	8006a3a <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	613b      	str	r3, [r7, #16]
        break;
 8006a38:	e005      	b.n	8006a46 <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	897b      	ldrh	r3, [r7, #10]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d8eb      	bhi.n	8006a1e <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 8006a46:	693b      	ldr	r3, [r7, #16]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	2100      	movs	r1, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fcf9 	bl	800746e <USBD_LL_Transmit>

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fce8 	bl	800746e <USBD_LL_Transmit>

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fcec 	bl	80074b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	2100      	movs	r1, #0
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fcdb 	bl	80074b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2204      	movs	r2, #4
 8006b10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fca7 	bl	800746e <USBD_LL_Transmit>

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2205      	movs	r2, #5
 8006b36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fcb5 	bl	80074b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4912      	ldr	r1, [pc, #72]	@ (8006ba0 <MX_USB_DEVICE_Init+0x50>)
 8006b58:	4812      	ldr	r0, [pc, #72]	@ (8006ba4 <MX_USB_DEVICE_Init+0x54>)
 8006b5a:	f7fd fd76 	bl	800464a <USBD_Init>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b64:	f7f9 fdba 	bl	80006dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8006b68:	490f      	ldr	r1, [pc, #60]	@ (8006ba8 <MX_USB_DEVICE_Init+0x58>)
 8006b6a:	480e      	ldr	r0, [pc, #56]	@ (8006ba4 <MX_USB_DEVICE_Init+0x54>)
 8006b6c:	f7fd fd9d 	bl	80046aa <USBD_RegisterClass>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b76:	f7f9 fdb1 	bl	80006dc <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8006b7a:	490c      	ldr	r1, [pc, #48]	@ (8006bac <MX_USB_DEVICE_Init+0x5c>)
 8006b7c:	4809      	ldr	r0, [pc, #36]	@ (8006ba4 <MX_USB_DEVICE_Init+0x54>)
 8006b7e:	f7ff fb37 	bl	80061f0 <USBD_DFU_RegisterMedia>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b88:	f7f9 fda8 	bl	80006dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b8c:	4805      	ldr	r0, [pc, #20]	@ (8006ba4 <MX_USB_DEVICE_Init+0x54>)
 8006b8e:	f7fd fdc2 	bl	8004716 <USBD_Start>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b98:	f7f9 fda0 	bl	80006dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000070 	.word	0x20000070
 8006ba4:	20000228 	.word	0x20000228
 8006ba8:	2000000c 	.word	0x2000000c
 8006bac:	200000c0 	.word	0x200000c0

08006bb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2212      	movs	r2, #18
 8006bc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bc2:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000008c 	.word	0x2000008c

08006bd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2204      	movs	r2, #4
 8006be4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006be6:	4b03      	ldr	r3, [pc, #12]	@ (8006bf4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	200000a0 	.word	0x200000a0

08006bf8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4907      	ldr	r1, [pc, #28]	@ (8006c2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c0e:	4808      	ldr	r0, [pc, #32]	@ (8006c30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c10:	f7fe ff3a 	bl	8005a88 <USBD_GetString>
 8006c14:	e004      	b.n	8006c20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4904      	ldr	r1, [pc, #16]	@ (8006c2c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c1a:	4805      	ldr	r0, [pc, #20]	@ (8006c30 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c1c:	f7fe ff34 	bl	8005a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c20:	4b02      	ldr	r3, [pc, #8]	@ (8006c2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000504 	.word	0x20000504
 8006c30:	080075ec 	.word	0x080075ec

08006c34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	4904      	ldr	r1, [pc, #16]	@ (8006c54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c44:	4804      	ldr	r0, [pc, #16]	@ (8006c58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c46:	f7fe ff1f 	bl	8005a88 <USBD_GetString>
  return USBD_StrDesc;
 8006c4a:	4b02      	ldr	r3, [pc, #8]	@ (8006c54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000504 	.word	0x20000504
 8006c58:	0800760c 	.word	0x0800760c

08006c5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	221a      	movs	r2, #26
 8006c6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c6e:	f000 f843 	bl	8006cf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c72:	4b02      	ldr	r3, [pc, #8]	@ (8006c7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	200000a4 	.word	0x200000a4

08006c80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4907      	ldr	r1, [pc, #28]	@ (8006cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c96:	4808      	ldr	r0, [pc, #32]	@ (8006cb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c98:	f7fe fef6 	bl	8005a88 <USBD_GetString>
 8006c9c:	e004      	b.n	8006ca8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4904      	ldr	r1, [pc, #16]	@ (8006cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ca2:	4805      	ldr	r0, [pc, #20]	@ (8006cb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ca4:	f7fe fef0 	bl	8005a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	@ (8006cb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000504 	.word	0x20000504
 8006cb8:	08007620 	.word	0x08007620

08006cbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	4907      	ldr	r1, [pc, #28]	@ (8006cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cd2:	4808      	ldr	r0, [pc, #32]	@ (8006cf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cd4:	f7fe fed8 	bl	8005a88 <USBD_GetString>
 8006cd8:	e004      	b.n	8006ce4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cde:	4805      	ldr	r0, [pc, #20]	@ (8006cf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ce0:	f7fe fed2 	bl	8005a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ce4:	4b02      	ldr	r3, [pc, #8]	@ (8006cf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000504 	.word	0x20000504
 8006cf4:	0800762c 	.word	0x0800762c

08006cf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006d3c <Get_SerialNum+0x44>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d04:	4b0e      	ldr	r3, [pc, #56]	@ (8006d40 <Get_SerialNum+0x48>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d44 <Get_SerialNum+0x4c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d1e:	2208      	movs	r2, #8
 8006d20:	4909      	ldr	r1, [pc, #36]	@ (8006d48 <Get_SerialNum+0x50>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f814 	bl	8006d50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d28:	2204      	movs	r2, #4
 8006d2a:	4908      	ldr	r1, [pc, #32]	@ (8006d4c <Get_SerialNum+0x54>)
 8006d2c:	68b8      	ldr	r0, [r7, #8]
 8006d2e:	f000 f80f 	bl	8006d50 <IntToUnicode>
  }
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	1fff7a10 	.word	0x1fff7a10
 8006d40:	1fff7a14 	.word	0x1fff7a14
 8006d44:	1fff7a18 	.word	0x1fff7a18
 8006d48:	200000a6 	.word	0x200000a6
 8006d4c:	200000b6 	.word	0x200000b6

08006d50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]
 8006d66:	e027      	b.n	8006db8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0f1b      	lsrs	r3, r3, #28
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	d80b      	bhi.n	8006d88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	0f1b      	lsrs	r3, r3, #28
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	440b      	add	r3, r1
 8006d80:	3230      	adds	r2, #48	@ 0x30
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	e00a      	b.n	8006d9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	0f1b      	lsrs	r3, r3, #28
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4619      	mov	r1, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	440b      	add	r3, r1
 8006d98:	3237      	adds	r2, #55	@ 0x37
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	3301      	adds	r3, #1
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	3301      	adds	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
 8006db8:	7dfa      	ldrb	r2, [r7, #23]
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d3d3      	bcc.n	8006d68 <IntToUnicode+0x18>
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
	HAL_StatusTypeDef flash_ok = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	71fb      	strb	r3, [r7, #7]

	  //Делаем память открытой
	  while(flash_ok != HAL_OK){
 8006dd8:	e003      	b.n	8006de2 <MEM_If_Init_FS+0x14>
		   flash_ok = HAL_FLASH_Unlock();
 8006dda:	f7f9 ff1f 	bl	8000c1c <HAL_FLASH_Unlock>
 8006dde:	4603      	mov	r3, r0
 8006de0:	71fb      	strb	r3, [r7, #7]
	  while(flash_ok != HAL_OK){
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f8      	bne.n	8006dda <MEM_If_Init_FS+0xc>
	  }

  return (USBD_OK);
 8006de8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef flash_ok = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	71fb      	strb	r3, [r7, #7]

	  //Закрываем память
	  flash_ok = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	71fb      	strb	r3, [r7, #7]
	  while(flash_ok != HAL_OK){
 8006e00:	e003      	b.n	8006e0a <MEM_If_DeInit_FS+0x18>
	    flash_ok = HAL_FLASH_Lock();
 8006e02:	f7f9 ff2d 	bl	8000c60 <HAL_FLASH_Lock>
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
	  while(flash_ok != HAL_OK){
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f8      	bne.n	8006e02 <MEM_If_DeInit_FS+0x10>
	  }

  return (USBD_OK);
 8006e10:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	@ 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  UNUSED(Add);

  uint32_t NbOfPages = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
   uint32_t PageError = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
   /* Variable contains Flash operation status */
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef eraseinitstruct;

   NbOfPages = ((FLASH_APP_END_ADDRESS - FLASH_APP_START_ADDRESS) / FLASH_PAGE_SIZE) + 1;
 8006e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006e6c <MEM_If_Erase_FS+0x50>)
 8006e2e:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <MEM_If_Erase_FS+0x54>)
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	0b9b      	lsrs	r3, r3, #14
 8006e34:	3301      	adds	r3, #1
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
//     eraseinitstruct.TypeErase = FLASH_TYPEERASE_PAGES;
     eraseinitstruct.Sector = FLASH_APP_START_ADDRESS;
 8006e38:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <MEM_If_Erase_FS+0x54>)
 8006e3a:	613b      	str	r3, [r7, #16]
     eraseinitstruct.NbSectors = NbOfPages;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	617b      	str	r3, [r7, #20]
     status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 8006e40:	f107 021c 	add.w	r2, r7, #28
 8006e44:	f107 0308 	add.w	r3, r7, #8
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa f848 	bl	8000ee0 <HAL_FLASHEx_Erase>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

     if (status != HAL_OK)
 8006e56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <MEM_If_Erase_FS+0x46>
     {
       return (!USBD_OK);
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <MEM_If_Erase_FS+0x48>
     }

  return (USBD_OK);
 8006e62:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3728      	adds	r7, #40	@ 0x28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	08100000 	.word	0x08100000
 8006e70:	08014000 	.word	0x08014000

08006e74 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
//  UNUSED(src);
//  UNUSED(dest);
//  UNUSED(Len);

  uint32_t i = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]

    for(i = 0; i < Len; i+=4)
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e023      	b.n	8006ed2 <MEM_If_Write_FS+0x5e>
    {
      /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
         be done by byte */
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(dest+i), *(uint32_t*)(src+i)) == HAL_OK)
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4413      	add	r3, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4413      	add	r3, r2
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	4615      	mov	r5, r2
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	2002      	movs	r0, #2
 8006ea6:	f7f9 fe65 	bl	8000b74 <HAL_FLASH_Program>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <MEM_If_Write_FS+0x54>
      {
  //			Usart1_Send_String("MEM_If_Write_FS OK!");
       /* Check the written value */
        if(*(uint32_t *)(src + i) != *(uint32_t*)(dest+i))
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	440b      	add	r3, r1
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d003      	beq.n	8006ecc <MEM_If_Write_FS+0x58>
        {
          /* Flash content doesn't match SRAM content */
          return 2;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e009      	b.n	8006edc <MEM_If_Write_FS+0x68>
      }
      else
      {

        /* Error occurred while writing data in Flash memory */
        return (!USBD_OK);
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e007      	b.n	8006edc <MEM_If_Write_FS+0x68>
    for(i = 0; i < Len; i+=4)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3d7      	bcc.n	8006e8a <MEM_If_Write_FS+0x16>
      }
    }


  return (USBD_OK);
 8006eda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bdb0      	pop	{r4, r5, r7, pc}

08006ee4 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 4 */
//  UNUSED(src);
//  UNUSED(dest);
//  UNUSED(Len);

  uint32_t i = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  uint8_t *psrc = src;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	613b      	str	r3, [r7, #16]

  for (i = 0; i < Len; i++)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e00a      	b.n	8006f14 <MEM_If_Read_FS+0x30>
  {
    dest[i] = *psrc++;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	613a      	str	r2, [r7, #16]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	440a      	add	r2, r1
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < Len; i++)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d3f0      	bcc.n	8006efe <MEM_If_Read_FS+0x1a>
  }
  return (uint8_t*)(dest); /* ВНИМАТЕЛЬНО, В ГЕНЕРАЦИИ ПО УМОЛЧАНИЮ ДРУГОЕ*/
 8006f1c:	68bb      	ldr	r3, [r7, #8]

//  return (uint8_t*)(USBD_OK);
  /* USER CODE END 4 */
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	460b      	mov	r3, r1
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  UNUSED(Add);
//  UNUSED(buffer);

  switch (Cmd)
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10c      	bne.n	8006f58 <MEM_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
        buffer[1] = (uint8_t)FLASH_PROGRAM_TIME;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3301      	adds	r3, #1
 8006f42:	2232      	movs	r2, #50	@ 0x32
 8006f44:	701a      	strb	r2, [r3, #0]
        buffer[2] = (uint8_t)(FLASH_PROGRAM_TIME << 8);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3302      	adds	r3, #2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	701a      	strb	r2, [r3, #0]
        buffer[3] = 0;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3303      	adds	r3, #3
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
    break;
 8006f56:	e00c      	b.n	8006f72 <MEM_If_GetStatus_FS+0x48>

    case DFU_MEDIA_ERASE:
    default:
        buffer[1] = (uint8_t)FLASH_ERASE_TIME;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	2232      	movs	r2, #50	@ 0x32
 8006f5e:	701a      	strb	r2, [r3, #0]
        buffer[2] = (uint8_t)(FLASH_ERASE_TIME << 8);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3302      	adds	r3, #2
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
        buffer[3] = 0;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]

    break;
 8006f70:	bf00      	nop
  }
  return (USBD_OK);
 8006f72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	@ 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f88:	f107 0314 	add.w	r3, r7, #20
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fa0:	d13a      	bne.n	8007018 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006faa:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fd0:	230a      	movs	r3, #10
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4812      	ldr	r0, [pc, #72]	@ (8007024 <HAL_PCD_MspInit+0xa4>)
 8006fdc:	f7fa f8a2 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fea:	6353      	str	r3, [r2, #52]	@ 0x34
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ffa:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ffc:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <HAL_PCD_MspInit+0xa0>)
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	2043      	movs	r0, #67	@ 0x43
 800700e:	f7f9 fd7a 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007012:	2043      	movs	r0, #67	@ 0x43
 8007014:	f7f9 fd93 	bl	8000b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007018:	bf00      	nop
 800701a:	3728      	adds	r7, #40	@ 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40023800 	.word	0x40023800
 8007024:	40020000 	.word	0x40020000

08007028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fd fbd1 	bl	80047e6 <USBD_LL_SetupStage>
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	4619      	mov	r1, r3
 8007076:	f7fd fc0b 	bl	8004890 <USBD_LL_DataOutStage>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	3320      	adds	r3, #32
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f7fd fca4 	bl	80049f6 <USBD_LL_DataInStage>
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fdde 	bl	8004c86 <USBD_LL_SOF>
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070da:	2301      	movs	r3, #1
 80070dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	79db      	ldrb	r3, [r3, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
 80070ea:	e008      	b.n	80070fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	79db      	ldrb	r3, [r3, #7]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d102      	bne.n	80070fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e001      	b.n	80070fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070fa:	f7f9 faef 	bl	80006dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007104:	7bfa      	ldrb	r2, [r7, #15]
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7fd fd78 	bl	8004bfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007114:	4618      	mov	r0, r3
 8007116:	f7fd fd20 	bl	8004b5a <USBD_LL_Reset>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd fd73 	bl	8004c1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7adb      	ldrb	r3, [r3, #11]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <HAL_PCD_SuspendCallback+0x48>)
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	4a03      	ldr	r2, [pc, #12]	@ (800716c <HAL_PCD_SuspendCallback+0x48>)
 800715e:	f043 0306 	orr.w	r3, r3, #6
 8007162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	e000ed00 	.word	0xe000ed00

08007170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800717e:	4618      	mov	r0, r3
 8007180:	f7fd fd69 	bl	8004c56 <USBD_LL_Resume>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fd fdc1 	bl	8004d2a <USBD_LL_IsoOUTIncomplete>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fd7d 	bl	8004cc6 <USBD_LL_IsoINIncomplete>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fd fdd3 	bl	8004d8e <USBD_LL_DevConnected>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd fdd0 	bl	8004da4 <USBD_LL_DevDisconnected>
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d13c      	bne.n	8007296 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800721c:	4a20      	ldr	r2, [pc, #128]	@ (80072a0 <USBD_LL_Init+0x94>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a1e      	ldr	r2, [pc, #120]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007228:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800722c:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <USBD_LL_Init+0x94>)
 800722e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007232:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007234:	4b1a      	ldr	r3, [pc, #104]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007236:	2204      	movs	r2, #4
 8007238:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800723a:	4b19      	ldr	r3, [pc, #100]	@ (80072a0 <USBD_LL_Init+0x94>)
 800723c:	2202      	movs	r2, #2
 800723e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007240:	4b17      	ldr	r3, [pc, #92]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007242:	2200      	movs	r2, #0
 8007244:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007246:	4b16      	ldr	r3, [pc, #88]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007248:	2202      	movs	r2, #2
 800724a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800724c:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <USBD_LL_Init+0x94>)
 800724e:	2200      	movs	r2, #0
 8007250:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007252:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007254:	2200      	movs	r2, #0
 8007256:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007258:	4b11      	ldr	r3, [pc, #68]	@ (80072a0 <USBD_LL_Init+0x94>)
 800725a:	2200      	movs	r2, #0
 800725c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800725e:	4b10      	ldr	r3, [pc, #64]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007260:	2200      	movs	r2, #0
 8007262:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007264:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007266:	2200      	movs	r2, #0
 8007268:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800726a:	480d      	ldr	r0, [pc, #52]	@ (80072a0 <USBD_LL_Init+0x94>)
 800726c:	f7fa f927 	bl	80014be <HAL_PCD_Init>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007276:	f7f9 fa31 	bl	80006dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800727a:	2180      	movs	r1, #128	@ 0x80
 800727c:	4808      	ldr	r0, [pc, #32]	@ (80072a0 <USBD_LL_Init+0x94>)
 800727e:	f7fb fb2c 	bl	80028da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007282:	2240      	movs	r2, #64	@ 0x40
 8007284:	2100      	movs	r1, #0
 8007286:	4806      	ldr	r0, [pc, #24]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007288:	f7fb fae0 	bl	800284c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800728c:	2280      	movs	r2, #128	@ 0x80
 800728e:	2101      	movs	r1, #1
 8007290:	4803      	ldr	r0, [pc, #12]	@ (80072a0 <USBD_LL_Init+0x94>)
 8007292:	f7fb fadb 	bl	800284c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000704 	.word	0x20000704

080072a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fa fa0e 	bl	80016dc <HAL_PCD_Start>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f92c 	bl	8007524 <USBD_Get_USB_Status>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fa fa28 	bl	8001746 <HAL_PCD_Stop>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f911 	bl	8007524 <USBD_Get_USB_Status>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007306:	7bbb      	ldrb	r3, [r7, #14]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4603      	mov	r3, r0
 8007320:	70fb      	strb	r3, [r7, #3]
 8007322:	460b      	mov	r3, r1
 8007324:	70bb      	strb	r3, [r7, #2]
 8007326:	4613      	mov	r3, r2
 8007328:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007338:	78bb      	ldrb	r3, [r7, #2]
 800733a:	883a      	ldrh	r2, [r7, #0]
 800733c:	78f9      	ldrb	r1, [r7, #3]
 800733e:	f7fa ff02 	bl	8002146 <HAL_PCD_EP_Open>
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f8eb 	bl	8007524 <USBD_Get_USB_Status>
 800734e:	4603      	mov	r3, r0
 8007350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007352:	7bbb      	ldrb	r3, [r7, #14]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	4611      	mov	r1, r2
 800737a:	4618      	mov	r0, r3
 800737c:	f7fa ffc2 	bl	8002304 <HAL_PCD_EP_SetStall>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f8cc 	bl	8007524 <USBD_Get_USB_Status>
 800738c:	4603      	mov	r3, r0
 800738e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007390:	7bbb      	ldrb	r3, [r7, #14]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fb f806 	bl	80023ca <HAL_PCD_EP_ClrStall>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f8ad 	bl	8007524 <USBD_Get_USB_Status>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da0b      	bge.n	800740c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073fa:	68f9      	ldr	r1, [r7, #12]
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	3316      	adds	r3, #22
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	e00b      	b.n	8007424 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	4613      	mov	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007422:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fa fe55 	bl	80020fe <HAL_PCD_SetAddress>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f862 	bl	8007524 <USBD_Get_USB_Status>
 8007460:	4603      	mov	r3, r0
 8007462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007464:	7bbb      	ldrb	r3, [r7, #14]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	460b      	mov	r3, r1
 800747c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800748c:	7af9      	ldrb	r1, [r7, #11]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	f7fa fefd 	bl	8002290 <HAL_PCD_EP_Transmit>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f841 	bl	8007524 <USBD_Get_USB_Status>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	460b      	mov	r3, r1
 80074be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074ce:	7af9      	ldrb	r1, [r7, #11]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	f7fa fea1 	bl	800221a <HAL_PCD_EP_Receive>
 80074d8:	4603      	mov	r3, r0
 80074da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f820 	bl	8007524 <USBD_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074fc:	4b03      	ldr	r3, [pc, #12]	@ (800750c <USBD_static_malloc+0x18>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000be8 	.word	0x20000be8

08007510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	2b03      	cmp	r3, #3
 8007536:	d817      	bhi.n	8007568 <USBD_Get_USB_Status+0x44>
 8007538:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <USBD_Get_USB_Status+0x1c>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007551 	.word	0x08007551
 8007544:	08007557 	.word	0x08007557
 8007548:	0800755d 	.word	0x0800755d
 800754c:	08007563 	.word	0x08007563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
    break;
 8007554:	e00b      	b.n	800756e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	73fb      	strb	r3, [r7, #15]
    break;
 800755a:	e008      	b.n	800756e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
    break;
 8007560:	e005      	b.n	800756e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	73fb      	strb	r3, [r7, #15]
    break;
 8007566:	e002      	b.n	800756e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007568:	2303      	movs	r3, #3
 800756a:	73fb      	strb	r3, [r7, #15]
    break;
 800756c:	bf00      	nop
  }
  return usb_status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	@ (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	@ (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	@ (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	@ (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 f818 	bl	80075d4 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	080076b4 	.word	0x080076b4
 80075c8:	080076b4 	.word	0x080076b4
 80075cc:	080076b4 	.word	0x080076b4
 80075d0:	080076b8 	.word	0x080076b8

080075d4 <_init>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr

080075e0 <_fini>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr
